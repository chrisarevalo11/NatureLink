/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type ProjectStruct = {
  id: BigNumberish;
  amount: BigNumberish;
  projectTime: BigNumberish[];
  info: string;
  status: BigNumberish;
  crowdfunding: AddressLike;
  evaluation: AddressLike;
  creator: AddressLike;
};

export type ProjectStructOutput = [
  id: bigint,
  amount: bigint,
  projectTime: bigint[],
  info: string,
  status: bigint,
  crowdfunding: string,
  evaluation: string,
  creator: string
] & {
  id: bigint;
  amount: bigint;
  projectTime: bigint[];
  info: string;
  status: bigint;
  crowdfunding: string;
  evaluation: string;
  creator: string;
};

export interface INLReadInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllProjects"
      | "getAllProjectsByStatus"
      | "getAllProjectsByUser"
      | "getAllProjectsByUserStatus"
      | "getProjectByUser"
      | "getUsers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllProjects",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProjectsByStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProjectsByUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProjectsByUserStatus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectByUser",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getUsers", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getAllProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProjectsByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProjectsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProjectsByUserStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUsers", data: BytesLike): Result;
}

export interface INLRead extends BaseContract {
  connect(runner?: ContractRunner | null): INLRead;
  waitForDeployment(): Promise<this>;

  interface: INLReadInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllProjects: TypedContractMethod<[], [ProjectStructOutput[]], "view">;

  getAllProjectsByStatus: TypedContractMethod<
    [_status: BigNumberish],
    [ProjectStructOutput[]],
    "view"
  >;

  getAllProjectsByUser: TypedContractMethod<
    [_user: AddressLike],
    [ProjectStructOutput[]],
    "view"
  >;

  getAllProjectsByUserStatus: TypedContractMethod<
    [_user: AddressLike, _status: BigNumberish],
    [ProjectStructOutput[]],
    "view"
  >;

  getProjectByUser: TypedContractMethod<
    [_user: AddressLike, _projectId: BigNumberish],
    [ProjectStructOutput],
    "view"
  >;

  getUsers: TypedContractMethod<[], [string[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllProjects"
  ): TypedContractMethod<[], [ProjectStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllProjectsByStatus"
  ): TypedContractMethod<
    [_status: BigNumberish],
    [ProjectStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllProjectsByUser"
  ): TypedContractMethod<[_user: AddressLike], [ProjectStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllProjectsByUserStatus"
  ): TypedContractMethod<
    [_user: AddressLike, _status: BigNumberish],
    [ProjectStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProjectByUser"
  ): TypedContractMethod<
    [_user: AddressLike, _projectId: BigNumberish],
    [ProjectStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUsers"
  ): TypedContractMethod<[], [string[]], "view">;

  filters: {};
}
