/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Evaluation {
  export type JudgeStruct = {
    images: boolean[];
    georeference: boolean;
    document: boolean;
    links: boolean[];
  };

  export type JudgeStructOutput = [
    images: boolean[],
    georeference: boolean,
    document: boolean,
    links: boolean[]
  ] & {
    images: boolean[];
    georeference: boolean;
    document: boolean;
    links: boolean[];
  };
}

export interface EvaluationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allJudges"
      | "bounty"
      | "creator"
      | "crowdfunding"
      | "deadline"
      | "evaluateEvidence"
      | "evaluationCounter"
      | "evaluationTime"
      | "evaluators"
      | "evidence"
      | "getAllEvaluatorsSelected"
      | "getAllJudges"
      | "isEvaluator"
      | "isJudged"
      | "judges"
      | "leaveApplicaction"
      | "openForEvaluate"
      | "owner"
      | "projectTime"
      | "proposeEvaluator"
      | "pushComm"
      | "renounceOwnership"
      | "selectEvaluators"
      | "selectedEvaluators"
      | "setEvidence"
      | "setSelectedEvaluators"
      | "transferOwnership"
      | "vrfConsumer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "SelectedEvaluators"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allJudges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bounty", values?: undefined): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "crowdfunding",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "evaluateEvidence",
    values: [boolean[], boolean, boolean, boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "evaluationCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "evaluationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "evaluators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "evidence", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllEvaluatorsSelected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllJudges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEvaluator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isJudged",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "judges", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "leaveApplicaction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openForEvaluate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projectTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeEvaluator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pushComm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectEvaluators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectedEvaluators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setEvidence", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSelectedEvaluators",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfConsumer",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allJudges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bounty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crowdfunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "evaluateEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evaluationCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evaluationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "evaluators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "evidence", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllEvaluatorsSelected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllJudges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEvaluator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isJudged", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "judges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leaveApplicaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openForEvaluate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeEvaluator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pushComm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectEvaluators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectedEvaluators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSelectedEvaluators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfConsumer",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SelectedEvaluatorsEvent {
  export type InputTuple = [arg0: AddressLike[]];
  export type OutputTuple = [arg0: string[]];
  export interface OutputObject {
    arg0: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Evaluation extends BaseContract {
  connect(runner?: ContractRunner | null): Evaluation;
  waitForDeployment(): Promise<this>;

  interface: EvaluationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allJudges: TypedContractMethod<
    [arg0: BigNumberish],
    [[boolean, boolean] & { georeference: boolean; document: boolean }],
    "view"
  >;

  bounty: TypedContractMethod<[], [bigint], "view">;

  creator: TypedContractMethod<[], [string], "view">;

  crowdfunding: TypedContractMethod<[], [string], "view">;

  deadline: TypedContractMethod<[], [bigint], "view">;

  evaluateEvidence: TypedContractMethod<
    [
      _images: boolean[],
      _georeference: boolean,
      _document: boolean,
      _links: boolean[]
    ],
    [void],
    "nonpayable"
  >;

  evaluationCounter: TypedContractMethod<[], [bigint], "view">;

  evaluationTime: TypedContractMethod<[], [bigint], "view">;

  evaluators: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  evidence: TypedContractMethod<[], [string], "view">;

  getAllEvaluatorsSelected: TypedContractMethod<[], [string[]], "view">;

  getAllJudges: TypedContractMethod<
    [],
    [Evaluation.JudgeStructOutput[]],
    "view"
  >;

  isEvaluator: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isJudged: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  judges: TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, boolean] & { georeference: boolean; document: boolean }],
    "view"
  >;

  leaveApplicaction: TypedContractMethod<[], [void], "nonpayable">;

  openForEvaluate: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  projectTime: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  proposeEvaluator: TypedContractMethod<[], [void], "nonpayable">;

  pushComm: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  selectEvaluators: TypedContractMethod<[], [boolean], "nonpayable">;

  selectedEvaluators: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  setEvidence: TypedContractMethod<[_evidence: string], [void], "nonpayable">;

  setSelectedEvaluators: TypedContractMethod<
    [_selectedEvaluators: AddressLike[]],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vrfConsumer: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allJudges"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[boolean, boolean] & { georeference: boolean; document: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "bounty"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "creator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "crowdfunding"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "evaluateEvidence"
  ): TypedContractMethod<
    [
      _images: boolean[],
      _georeference: boolean,
      _document: boolean,
      _links: boolean[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "evaluationCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "evaluationTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "evaluators"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "evidence"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllEvaluatorsSelected"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllJudges"
  ): TypedContractMethod<[], [Evaluation.JudgeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "isEvaluator"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isJudged"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "judges"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, boolean] & { georeference: boolean; document: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "leaveApplicaction"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "openForEvaluate"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projectTime"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposeEvaluator"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pushComm"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "selectEvaluators"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "selectedEvaluators"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "setEvidence"
  ): TypedContractMethod<[_evidence: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSelectedEvaluators"
  ): TypedContractMethod<
    [_selectedEvaluators: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vrfConsumer"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SelectedEvaluators"
  ): TypedContractEvent<
    SelectedEvaluatorsEvent.InputTuple,
    SelectedEvaluatorsEvent.OutputTuple,
    SelectedEvaluatorsEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SelectedEvaluators(address[])": TypedContractEvent<
      SelectedEvaluatorsEvent.InputTuple,
      SelectedEvaluatorsEvent.OutputTuple,
      SelectedEvaluatorsEvent.OutputObject
    >;
    SelectedEvaluators: TypedContractEvent<
      SelectedEvaluatorsEvent.InputTuple,
      SelectedEvaluatorsEvent.OutputTuple,
      SelectedEvaluatorsEvent.OutputObject
    >;
  };
}
