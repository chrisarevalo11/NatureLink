/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace NatureLink {
  export type ProjectStruct = {
    id: BigNumberish;
    amount: BigNumberish;
    projectTime: BigNumberish[];
    info: string;
    status: BigNumberish;
    crowdfunding: AddressLike;
    evaluation: AddressLike;
    creator: AddressLike;
  };

  export type ProjectStructOutput = [
    id: bigint,
    amount: bigint,
    projectTime: bigint[],
    info: string,
    status: bigint,
    crowdfunding: string,
    evaluation: string,
    creator: string
  ] & {
    id: bigint;
    amount: bigint;
    projectTime: bigint[];
    info: string;
    status: bigint;
    crowdfunding: string;
    evaluation: string;
    creator: string;
  };
}

export interface NatureLinkInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createProject"
      | "getAllProjects"
      | "hypercerts"
      | "isUser"
      | "owner"
      | "portfolios"
      | "pushComm"
      | "refundStakesForFailedProjects"
      | "renounceOwnership"
      | "setProjectStatus"
      | "setTreasury"
      | "transferOwnership"
      | "treasury"
      | "users"
      | "vrfConsumer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "ProjectCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createProject",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProjects",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hypercerts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isUser", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "portfolios",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pushComm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundStakesForFailedProjects",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProjectStatus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "users", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "vrfConsumer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hypercerts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "portfolios", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushComm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundStakesForFailedProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProjectStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vrfConsumer",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCreatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    amount: BigNumberish,
    projectTime: BigNumberish[],
    info: string,
    status: BigNumberish,
    crowdfunding: AddressLike,
    evaluation: AddressLike,
    creator: AddressLike
  ];
  export type OutputTuple = [
    projectId: bigint,
    amount: bigint,
    projectTime: bigint[],
    info: string,
    status: bigint,
    crowdfunding: string,
    evaluation: string,
    creator: string
  ];
  export interface OutputObject {
    projectId: bigint;
    amount: bigint;
    projectTime: bigint[];
    info: string;
    status: bigint;
    crowdfunding: string;
    evaluation: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NatureLink extends BaseContract {
  connect(runner?: ContractRunner | null): NatureLink;
  waitForDeployment(): Promise<this>;

  interface: NatureLinkInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProject: TypedContractMethod<
    [
      _amount: BigNumberish,
      _planning: BigNumberish,
      _projectTime: BigNumberish[],
      _evaluationTime: BigNumberish,
      _info: string
    ],
    [void],
    "nonpayable"
  >;

  getAllProjects: TypedContractMethod<
    [],
    [NatureLink.ProjectStructOutput[]],
    "view"
  >;

  hypercerts: TypedContractMethod<[], [string], "view">;

  isUser: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  portfolios: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  pushComm: TypedContractMethod<[], [string], "view">;

  refundStakesForFailedProjects: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setProjectStatus: TypedContractMethod<
    [_creator: AddressLike, _newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [string],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  users: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  vrfConsumer: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      _planning: BigNumberish,
      _projectTime: BigNumberish[],
      _evaluationTime: BigNumberish,
      _info: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllProjects"
  ): TypedContractMethod<[], [NatureLink.ProjectStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "hypercerts"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isUser"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "portfolios"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pushComm"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "refundStakesForFailedProjects"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProjectStatus"
  ): TypedContractMethod<
    [_creator: AddressLike, _newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "vrfConsumer"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCreated"
  ): TypedContractEvent<
    ProjectCreatedEvent.InputTuple,
    ProjectCreatedEvent.OutputTuple,
    ProjectCreatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProjectCreated(uint256,uint256,uint256[],string,uint256,address,address,address)": TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
    ProjectCreated: TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
  };
}
