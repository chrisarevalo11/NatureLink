/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  VRFv2ConsumerMock,
  VRFv2ConsumerMockInterface,
} from "../../../contracts/mocks/VRFv2ConsumerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "_subscriptionId",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "RequestFulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "numWords",
        type: "uint32",
      },
    ],
    name: "RequestSent",
    type: "event",
  },
  {
    inputs: [],
    name: "evaluation",
    outputs: [
      {
        internalType: "contract IEvaluation",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_randomWords",
        type: "uint256[]",
      },
    ],
    name: "fulfillRandomWordsMock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "getRequestStatus",
    outputs: [
      {
        internalType: "bool",
        name: "fulfilled",
        type: "bool",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastRequestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "natureLinkAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "permitted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestIdCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "requestIds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_numWords",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_evaluatorContract",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_evaluators",
        type: "address[]",
      },
    ],
    name: "requestRandomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "s_evaluatorContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_evaluators",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_evaluatorsSelected",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_requests",
    outputs: [
      {
        internalType: "bool",
        name: "fulfilled",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_natureLinkAddress",
        type: "address",
      },
    ],
    name: "setNaturelinkAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_evaluator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_permitted",
        type: "bool",
      },
    ],
    name: "setPermittedEvaluator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x600360808181526101006040529060a0606080368337505081516200002c926008925060200190620000e8565b503480156200003a57600080fd5b50604051620011d3380380620011d38339810160408190526200005d9162000169565b620000683362000098565b600080546001600160401b03909216600160a01b02600160a01b600160e01b03199092169190911790556200019b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000140579160200282015b828111156200014057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000109565b506200014e92915062000152565b5090565b5b808211156200014e576000815560010162000153565b6000602082840312156200017c57600080fd5b81516001600160401b03811681146200019457600080fd5b9392505050565b61102880620001ab6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638c6d9b71116100a2578063c66880a511610071578063c66880a514610278578063c947dc001461028b578063d8a4676f1461029e578063f2fde38b146102bf578063fc2a88c3146102d257600080fd5b80638c6d9b71146102085780638da5cb5b1461021b5780638db5888a1461022c578063a168fa891461023557600080fd5b80635f742a7e116100e95780635f742a7e146101945780636cc301e3146101a7578063715018a6146101da578063877e7c15146101e25780638796ba8c146101f557600080fd5b80631ecddcfb1461011b5780632af5c9191461014b5780633cac2db11461015e578063537dd4f814610173575b600080fd5b61012e610129366004610c71565b6102db565b6040516001600160a01b0390911681526020015b60405180910390f35b60045461012e906001600160a01b031681565b61017161016c366004610cf5565b610305565b005b610186610181366004610dae565b610313565b604051908152602001610142565b6101716101a2366004610e74565b6105fb565b6101ca6101b5366004610eb0565b600a6020526000908152604090205460ff1681565b6040519015158152602001610142565b61017161068e565b61012e6101f0366004610c71565b6106a2565b610186610203366004610c71565b6106b2565b60065461012e906001600160a01b031681565b6000546001600160a01b031661012e565b61018660015481565b610261610243366004610c71565b60096020526000908152604090205460ff8082169161010090041682565b604080519215158352901515602083015201610142565b60055461012e906001600160a01b031681565b61012e610299366004610eb0565b6106d3565b6102b16102ac366004610c71565b610702565b604051610142929190610ed2565b6101716102cd366004610eb0565b6107f6565b61018660025481565b600881815481106102eb57600080fd5b6000918252602090912001546001600160a01b0316905081565b61030f828261086f565b5050565b336000908152600a602052604081205460ff166103815760405162461bcd60e51b815260206004820152602160248201527f7265717565737452616e646f6d576f7264733a204e6f74207065726d697474656044820152601960fa1b60648201526084015b60405180910390fd5b6003825110156103e45760405162461bcd60e51b815260206004820152602860248201527f7265717565737452616e646f6d576f7264733a204e6f7420656e6f7567682061604482015267646472657373657360c01b6064820152608401610378565b600480546001600160a01b0319166001600160a01b0385161790558151610412906007906020850190610bbc565b5060408051600380825260808201909252906020820160608036833750508151610443926008925060200190610bbc565b506001805490600061045483610f38565b90915550506001546040805160038082526080820190925291925060009190602082016060803683370190505090506b256a18dd89e626ab393d8599816000815181106104a3576104a3610f51565b6020026020010181815250506b256a18dd89e626ab393d8599816001815181106104cf576104cf610f51565b602002602001018181525050710154484932d2e725a3879f86afb7e4e5e4ca8160028151811061050157610501610f51565b6020908102919091018101919091526040805160608101825260008082526001828501818152838501878152888452600987529490922083518154935161ffff1990941690151561ff0019161761010093151593909302929092178255925180519294919361057893908501929190910190610c21565b5050600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018390555060028290556040805183815263ffffffff871660208201527fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee910160405180910390a1509392505050565b6005546001600160a01b031633146106635760405162461bcd60e51b815260206004820152602560248201527f7365745065726d69747465644576616c7561746f723a204e6f7420617574686f6044820152641c9a5e995960da1b6064820152608401610378565b6001600160a01b03919091166000908152600a60205260409020805460ff1916911515919091179055565b610696610b12565b6106a06000610b6c565b565b600781815481106102eb57600080fd5b600381815481106106c257600080fd5b600091825260209091200154905081565b60006106dd610b12565b50600580546001600160a01b0319166001600160a01b0383169081179091555b919050565b600081815260096020526040812054606090610100900460ff1661075c5760405162461bcd60e51b81526020600482015260116024820152701c995c5d595cdd081b9bdd08199bdd5b99607a1b6044820152606401610378565b60008381526009602090815260408083208151606081018352815460ff80821615158352610100909104161515818501526001820180548451818702810187018652818152929593948601938301828280156107d757602002820191906000526020600020905b8154815260200190600101908083116107c3575b5050505050815250509050806000015181604001519250925050915091565b6107fe610b12565b6001600160a01b0381166108635760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610378565b61086c81610b6c565b50565b600082815260096020526040902054610100900460ff166108c65760405162461bcd60e51b81526020600482015260116024820152701c995c5d595cdd081b9bdd08199bdd5b99607a1b6044820152606401610378565b6003815110156109185760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f7567682072616e646f6d20776f7264730000000000000000006044820152606401610378565b6000828152600960205260408120805460ff1916600117905560075467ffffffffffffffff81111561094c5761094c610c8a565b604051908082528060200260200182016040528015610975578160200160208202803683370190505b50905060005b82518110801561098b5750600381105b15610aaa576000600780549050600a8584815181106109ac576109ac610f51565b60200260200101516109be9190610f67565b6109c89190610f67565b90505b8281815181106109dd576109dd610f51565b602002602001015115610a09576007546109f8826001610f89565b610a029190610f67565b90506109cb565b6001838281518110610a1d57610a1d610f51565b60200260200101901515908115158152505060078181548110610a4257610a42610f51565b600091825260209091200154600880546001600160a01b039092169184908110610a6e57610a6e610f51565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790555080610aa281610f38565b91505061097b565b5060048054604051630853abf560e21b81526001600160a01b039091169163214eafd491610adb9160089101610fa2565b600060405180830381600087803b158015610af557600080fd5b505af1158015610b09573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b031633146106a05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610378565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215610c11579160200282015b82811115610c1157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610bdc565b50610c1d929150610c5c565b5090565b828054828255906000526020600020908101928215610c11579160200282015b82811115610c11578251825591602001919060010190610c41565b5b80821115610c1d5760008155600101610c5d565b600060208284031215610c8357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610cc957610cc9610c8a565b604052919050565b600067ffffffffffffffff821115610ceb57610ceb610c8a565b5060051b60200190565b60008060408385031215610d0857600080fd5b8235915060208084013567ffffffffffffffff811115610d2757600080fd5b8401601f81018613610d3857600080fd5b8035610d4b610d4682610cd1565b610ca0565b81815260059190911b82018301908381019088831115610d6a57600080fd5b928401925b82841015610d8857833582529284019290840190610d6f565b80955050505050509250929050565b80356001600160a01b03811681146106fd57600080fd5b600080600060608486031215610dc357600080fd5b833563ffffffff81168114610dd757600080fd5b92506020610de6858201610d97565b9250604085013567ffffffffffffffff811115610e0257600080fd5b8501601f81018713610e1357600080fd5b8035610e21610d4682610cd1565b81815260059190911b82018301908381019089831115610e4057600080fd5b928401925b82841015610e6557610e5684610d97565b82529284019290840190610e45565b80955050505050509250925092565b60008060408385031215610e8757600080fd5b610e9083610d97565b915060208301358015158114610ea557600080fd5b809150509250929050565b600060208284031215610ec257600080fd5b610ecb82610d97565b9392505050565b60006040820184151583526020604081850152818551808452606086019150828701935060005b81811015610f1557845183529383019391830191600101610ef9565b5090979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610f4a57610f4a610f22565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600082610f8457634e487b7160e01b600052601260045260246000fd5b500690565b80820180821115610f9c57610f9c610f22565b92915050565b6020808252825482820181905260008481528281209092916040850190845b81811015610fe65783546001600160a01b031683526001938401939285019201610fc1565b5090969550505050505056fea264697066735822122060ed4576f4b667099ec4a1572acc4b88236de4aead1d3faca141125a86e2a7a964736f6c63430008140033";

type VRFv2ConsumerMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VRFv2ConsumerMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VRFv2ConsumerMock__factory extends ContractFactory {
  constructor(...args: VRFv2ConsumerMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _subscriptionId: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_subscriptionId, overrides || {});
  }
  override deploy(
    _subscriptionId: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_subscriptionId, overrides || {}) as Promise<
      VRFv2ConsumerMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): VRFv2ConsumerMock__factory {
    return super.connect(runner) as VRFv2ConsumerMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VRFv2ConsumerMockInterface {
    return new Interface(_abi) as VRFv2ConsumerMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): VRFv2ConsumerMock {
    return new Contract(address, _abi, runner) as unknown as VRFv2ConsumerMock;
  }
}
