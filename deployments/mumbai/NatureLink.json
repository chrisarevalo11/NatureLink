{
  "address": "0x0AF8917eaCBf6275EF9C967fD332e6CE16AB181e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfConsumerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pushCommAddresspushCommAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hypercertsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "projectTime",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "info",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "crowdfunding",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "evaluation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "ProjectCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_planning",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_projectTime",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_evaluationTime",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_info",
          "type": "string"
        }
      ],
      "name": "createProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProjects",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "projectTime",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "info",
              "type": "string"
            },
            {
              "internalType": "enum status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "contract Crowdfunding",
              "name": "crowdfunding",
              "type": "address"
            },
            {
              "internalType": "contract Evaluation",
              "name": "evaluation",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            }
          ],
          "internalType": "struct NatureLink.Project[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hypercerts",
      "outputs": [
        {
          "internalType": "contract IHypercerts",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "portfolios",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "projectIdCounter",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pushComm",
      "outputs": [
        {
          "internalType": "contract IPUSHCommInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refundStakesForFailedProjects",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "enum status",
          "name": "_newStatus",
          "type": "uint8"
        }
      ],
      "name": "setProjectStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfConsumer",
      "outputs": [
        {
          "internalType": "contract IVRFv2Consumer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x93fa26b4b6c7e87b5ab9aa2b0cce1b6512b90b95e2cb0034e279080e3d890d4e",
  "receipt": {
    "to": null,
    "from": "0xD96B642Ca70edB30e58248689CEaFc6E36785d68",
    "contractAddress": "0x0AF8917eaCBf6275EF9C967fD332e6CE16AB181e",
    "transactionIndex": 1,
    "gasUsed": "5389683",
    "logsBloom": "0x
    "blockHash": "0x64535fa6429fcd87bf015b211227d58a9c9724a0be1608d9f6156c86fb12df95",
    "transactionHash": "0x93fa26b4b6c7e87b5ab9aa2b0cce1b6512b90b95e2cb0034e279080e3d890d4e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 43303208,
        "transactionHash": "0x93fa26b4b6c7e87b5ab9aa2b0cce1b6512b90b95e2cb0034e279080e3d890d4e",
        "address": "0x0AF8917eaCBf6275EF9C967fD332e6CE16AB181e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d96b642ca70edb30e58248689ceafc6e36785d68"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x64535fa6429fcd87bf015b211227d58a9c9724a0be1608d9f6156c86fb12df95"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 43303208,
        "transactionHash": "0x93fa26b4b6c7e87b5ab9aa2b0cce1b6512b90b95e2cb0034e279080e3d890d4e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d96b642ca70edb30e58248689ceafc6e36785d68",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000bf7ae199d9d24300000000000000000000000000000000000000000000000002943cd478d89c7f0000000000000000000000000000000000000000000022d53dc25c982880720500000000000000000000000000000000000000000000000001d4c1f2defeca3c0000000000000000000000000000000000000000000022d53e81d779c25a4448",
        "logIndex": 4,
        "blockHash": "0x64535fa6429fcd87bf015b211227d58a9c9724a0be1608d9f6156c86fb12df95"
      }
    ],
    "blockNumber": 43303208,
    "cumulativeGasUsed": "5466147",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd8E8c551D70E65f6C7a14CB97CFDBf513b8815e7",
    "0x0000000000000000000000000000000000000000",
    "0xe5db450ADdFCAe9748419f1bA9fD9067204DC148",
    "0x0e3E9b9631C114c7a851B299259B5b33837df31B"
  ],
  "numDeployments": 2,
  "solcInputHash": "f8b7dd7c8cf3f8f585245c898affa7c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfConsumerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pushCommAddresspushCommAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hypercertsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"projectTime\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"crowdfunding\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"evaluation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_planning\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_projectTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_evaluationTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_info\",\"type\":\"string\"}],\"name\":\"createProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProjects\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"projectTime\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"internalType\":\"enum status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"contract Crowdfunding\",\"name\":\"crowdfunding\",\"type\":\"address\"},{\"internalType\":\"contract Evaluation\",\"name\":\"evaluation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct NatureLink.Project[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hypercerts\",\"outputs\":[{\"internalType\":\"contract IHypercerts\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"portfolios\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"projectIdCounter\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushComm\",\"outputs\":[{\"internalType\":\"contract IPUSHCommInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundStakesForFailedProjects\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"enum status\",\"name\":\"_newStatus\",\"type\":\"uint8\"}],\"name\":\"setProjectStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfConsumer\",\"outputs\":[{\"internalType\":\"contract IVRFv2Consumer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NatureLink.sol\":\"NatureLink\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Crowdfunding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol';\\n\\nimport './interfaces/IHypercerts.sol';\\nimport './interfaces/IPUSHCommInterface.sol';\\nimport './interfaces/IEvaluation.sol';\\nimport './Evaluation.sol';\\n\\ncontract Crowdfunding is IERC1155Receiver, Ownable {\\n\\tusing Strings for address;\\n\\tusing Strings for uint;\\n\\n\\tbool public openForStake = true;\\n\\tbool public openForWithdraw = false;\\n\\tuint public deadline;\\n\\tuint public threshold;\\n\\tuint public bounty;\\n\\tuint public fee;\\n\\tuint public tokenIdCounter;\\n\\tIHypercerts public hypercerts;\\n\\tIEvaluation public evaluation;\\n\\tIPUSHCommInterface public pushComm;\\n\\n\\taddress public creator;\\n\\taddress public treasuryAddress;\\n\\taddress[] public stakers;\\n\\n\\tstring public info;\\n\\n\\tmapping(address => uint) public balances;\\n\\tmapping(address => bool) public isContributor;\\n\\n\\tevent Stake(address, uint);\\n\\tevent Withdraw(address, uint);\\n\\n\\tmodifier onlyCreator() {\\n\\t\\trequire(msg.sender == creator, 'onlyCreator: caller is not the creator');\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(\\n\\t\\tuint _amount,\\n\\t\\tuint _bounty,\\n\\t\\tuint _fee,\\n\\t\\tuint _deadline,\\n\\t\\taddress _creator,\\n\\t\\taddress _treasuryAddress,\\n\\t\\taddress _hypercertsAddress,\\n\\t\\taddress _pushCommAddress,\\n\\t\\tstring memory _info\\n\\t) {\\n\\t\\trequire(\\n\\t\\t\\t_amount > 0,\\n\\t\\t\\t'constructorCrowdfunding: amount must be greater than 0'\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_deadline > block.timestamp,\\n\\t\\t\\t'constructorCrowdfunding: deadline must be greater than current time'\\n\\t\\t);\\n\\n\\t\\tthreshold = _amount;\\n\\t\\tbounty = _bounty;\\n\\t\\tfee = _fee;\\n\\n\\t\\tdeadline = _deadline;\\n\\n\\t\\tcreator = _creator;\\n\\t\\ttreasuryAddress = _treasuryAddress;\\n\\t\\thypercerts = IHypercerts(_hypercertsAddress);\\n\\t\\tpushComm = IPUSHCommInterface(_pushCommAddress);\\n\\n\\t\\tinfo = _info;\\n\\t}\\n\\n\\t// ************************ //\\n\\t// *     Crowdfunding     * //\\n\\t// ************************ //\\n\\n\\treceive() external payable {\\n\\t\\tstake();\\n\\t}\\n\\n\\tfunction stake() public payable {\\n\\t\\trequire(msg.sender != creator, 'stake: the creator cannot stake');\\n\\t\\trequire(openForStake, 'stake: the staker is closed');\\n\\t\\trequire(block.timestamp < deadline, 'stake: the stake time is over');\\n\\t\\trequire(msg.value > 0, 'stake: stake amount must be greater than 0');\\n\\t\\trequire(\\n\\t\\t\\taddress(this).balance <= threshold,\\n\\t\\t\\t'stake: exceeded the threshold'\\n\\t\\t);\\n\\n\\t\\tif (address(this).balance == threshold) {\\n\\t\\t\\topenForStake = false;\\n\\t\\t\\topenForWithdraw = true;\\n\\t\\t}\\n\\n\\t\\tif (!isContributor[msg.sender]) {\\n\\t\\t\\tisContributor[msg.sender] = true;\\n\\t\\t\\tstakers.push(msg.sender);\\n\\t\\t}\\n\\n\\t\\tbalances[msg.sender] += msg.value;\\n\\n\\t\\temit Stake(msg.sender, msg.value);\\n\\t}\\n\\n\\tfunction execute() external onlyCreator {\\n\\t\\trequire(openForWithdraw, 'execute: the withdraw is closed');\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp >= deadline,\\n\\t\\t\\t'execute: the deadline has not passed'\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\taddress(this).balance == threshold,\\n\\t\\t\\t'execute: the threshold has not been met'\\n\\t\\t);\\n\\n\\t\\tbool successSelection = evaluation.selectEvaluators();\\n\\t\\trequire(successSelection, 'execute: failed to select evaluators');\\n\\n\\t\\tuint[] memory fractions = new uint[](stakers.length);\\n\\n\\t\\tfor (uint i = 0; i < stakers.length; i++) {\\n\\t\\t\\taddress staker = stakers[i];\\n\\t\\t\\tuint porcentage = _fraction(staker);\\n\\n\\t\\t\\tfractions[i] = porcentage;\\n\\t\\t}\\n\\n\\t\\tuint hypercertId = hypercerts.mint(\\n\\t\\t\\taddress(this),\\n\\t\\t\\ttokenIdCounter,\\n\\t\\t\\t100, // 100%\\n\\t\\t\\tabi.encodePacked(''),\\n\\t\\t\\tinfo\\n\\t\\t);\\n\\n\\t\\ttokenIdCounter++;\\n\\n\\t\\thypercerts.fractionateToken(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tstakers,\\n\\t\\t\\thypercertId,\\n\\t\\t\\tfractions,\\n\\t\\t\\tabi.encodePacked('')\\n\\t\\t);\\n\\n\\t\\t(bool response1, ) = treasuryAddress.call{value: fee}('');\\n\\t\\trequire(response1, 'execute: failed to send ether to treasury');\\n\\n\\t\\tuint bountyWithouFee = bounty - fee;\\n\\n\\t\\t(bool response, ) = address(evaluation).call{value: bountyWithouFee}('');\\n\\t\\trequire(response, 'execute: failed to send ether to evaluation');\\n\\n\\t\\t(bool response2, ) = msg.sender.call{value: address(this).balance}('');\\n\\t\\trequire(response2, 'execute: failed to send ether to owner');\\n\\n\\t\\topenForWithdraw = false;\\n\\t}\\n\\n\\tfunction timeLeft() public view returns (uint) {\\n\\t\\tif (block.timestamp < deadline) {\\n\\t\\t\\treturn deadline - block.timestamp;\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tfunction refundAll() public {\\n\\t\\trequire(\\n\\t\\t\\taddress(this).balance < threshold,\\n\\t\\t\\t'Crowdfunding: No refunds available'\\n\\t\\t);\\n\\n\\t\\tfor (uint i = 0; i < stakers.length; i++) {\\n\\t\\t\\taddress staker = stakers[i];\\n\\t\\t\\tuint balance = balances[staker];\\n\\t\\t\\tif (balance > 0) {\\n\\t\\t\\t\\tbalances[staker] = 0;\\n\\t\\t\\t\\t(bool sent, ) = staker.call{value: balance}('');\\n\\t\\t\\t\\trequire(sent, 'Failed to send Ether');\\n\\t\\t\\t\\temit Withdraw(staker, balance);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// ************************ //\\n\\t// *  Getters y Setters   * //\\n\\t// ************************ //\\n\\n\\tfunction getBalance() public view returns (uint) {\\n\\t\\treturn address(this).balance;\\n\\t}\\n\\n\\tfunction getStakers() public view returns (address[] memory) {\\n\\t\\treturn stakers;\\n\\t}\\n\\n\\tfunction getMissingAmount() public view returns (uint) {\\n\\t\\treturn threshold - address(this).balance;\\n\\t}\\n\\n\\tfunction setEvaluation(\\n\\t\\taddress _evaluation\\n\\t) external onlyOwner returns (address) {\\n\\t\\tevaluation = IEvaluation(_evaluation);\\n\\t\\treturn address(evaluation);\\n\\t}\\n\\n\\t// ************************ //\\n\\t// *       private        * //\\n\\t// ************************ //\\n\\n\\tfunction _fraction(address _staker) private view returns (uint) {\\n\\t\\tuint balance = balances[_staker];\\n\\t\\treturn (balance * 100) / threshold;\\n\\t}\\n\\n\\t// The following functions are overrides required by Solidity.\\n\\n\\tfunction onERC1155Received(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256 id,\\n\\t\\tuint256 value,\\n\\t\\tbytes calldata data\\n\\t) external override returns (bytes4) {\\n\\t\\treturn\\n\\t\\t\\tbytes4(\\n\\t\\t\\t\\tkeccak256('onERC1155Received(address,address,uint256,uint256,bytes)')\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction onERC1155BatchReceived(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\tuint256[] calldata ids,\\n\\t\\tuint256[] calldata values,\\n\\t\\tbytes calldata data\\n\\t) external override returns (bytes4) {\\n\\t\\treturn\\n\\t\\t\\tbytes4(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\t'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)'\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t) public view override(IERC165) returns (bool) {\\n\\t\\treturn interfaceId == type(IERC1155Receiver).interfaceId;\\n\\t}\\n}\\n\",\"keccak256\":\"0x0140473d01dfe0a7b9a23bbeeee66520fd656c0467066d1b675fbf1162bbb448\",\"license\":\"MIT\"},\"contracts/Evaluation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nimport './enums/enums.sol';\\nimport './interfaces/IPUSHCommInterface.sol';\\nimport './interfaces/IVRFv2Consumer.sol';\\nimport './interfaces/ICrowdfunding.sol';\\n\\nimport 'hardhat/console.sol';\\n\\ncontract Evaluation is Ownable {\\n\\tusing Strings for address;\\n\\tusing Strings for string;\\n\\tusing Strings for uint;\\n\\n\\tbool public openForEvaluate = true;\\n\\tuint public bounty;\\n\\tuint public deadline;\\n\\tuint public evaluationTime;\\n\\tuint public evaluationCounter;\\n\\tuint[] public projectTime;\\n\\n\\taddress public creator;\\n\\n\\tIVRFv2Consumer public vrfConsumer;\\n\\tIPUSHCommInterface public pushComm;\\n\\tICrowdfunding public crowdfunding;\\n\\taddress[] public selectedEvaluators;\\n\\taddress[] public evaluators;\\n\\tJudge[] public allJudges;\\n\\tstring public evidence;\\n\\n\\tstruct Judge {\\n\\t\\tbool[] images;\\n\\t\\tbool georeference;\\n\\t\\tbool document;\\n\\t\\tbool[] links;\\n\\t}\\n\\n\\tmapping(address => Judge) public judges;\\n\\tmapping(address => bool) public isEvaluator;\\n\\tmapping(address => bool) public isJudged;\\n\\n\\tevent SelectedEvaluators(address[]);\\n\\n\\tmodifier onlyCreator() {\\n\\t\\trequire(msg.sender == creator, 'onlyCreator: caller is not the creator');\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(\\n\\t\\taddress _vrfAddress,\\n\\t\\taddress _epnsCommAddress,\\n\\t\\taddress _crowdfundingAddress,\\n\\t\\taddress _creator,\\n\\t\\tuint _deadline,\\n\\t\\tuint[] memory _projectTime,\\n\\t\\tuint _evaluationTime\\n\\t) {\\n\\t\\tvrfConsumer = IVRFv2Consumer(_vrfAddress);\\n\\t\\tpushComm = IPUSHCommInterface(_epnsCommAddress);\\n\\t\\tcrowdfunding = ICrowdfunding(_crowdfundingAddress);\\n\\n\\t\\tprojectTime = _projectTime;\\n\\t\\tevaluationTime = _evaluationTime;\\n\\n\\t\\tcreator = _creator;\\n\\t\\tdeadline = _deadline;\\n\\t}\\n\\n\\t// ************************ //\\n\\t// *      Evaluation      * //\\n\\t// ************************ //\\n\\n\\treceive() external payable {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == address(crowdfunding),\\n\\t\\t\\t'receiver: Not the crowdfunding contract'\\n\\t\\t);\\n\\n\\t\\tbounty == msg.value;\\n\\t}\\n\\n\\tfunction proposeEvaluator() public {\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp < deadline,\\n\\t\\t\\t'becomeEvaluator: the selection period is over'\\n\\t\\t);\\n\\t\\trequire(!isEvaluator[msg.sender], 'becomeEvaluator: Already an evaluator');\\n\\n\\t\\tisEvaluator[msg.sender] = true;\\n\\t\\tevaluators.push(msg.sender);\\n\\t}\\n\\n\\tfunction leaveApplicaction() public {\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp < deadline,\\n\\t\\t\\t'leftEvaluator: the selection period is over'\\n\\t\\t);\\n\\t\\trequire(isEvaluator[msg.sender], 'leftEvaluator: Not an evaluator');\\n\\n\\t\\tisEvaluator[msg.sender] = false;\\n\\n\\t\\tfor (uint i = 0; i < evaluators.length; i++) {\\n\\t\\t\\tif (evaluators[i] == msg.sender) {\\n\\t\\t\\t\\tevaluators[i] = evaluators[evaluators.length - 1];\\n\\t\\t\\t\\tevaluators.pop();\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction selectEvaluators() external returns (bool) {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == address(crowdfunding),\\n\\t\\t\\t'selectEvaluators: Not the crowdfunding contract'\\n\\t\\t);\\n\\n\\t\\tif (evaluators.length > 3) {\\n\\t\\t\\tvrfConsumer.requestRandomWords(3, address(this), evaluators);\\n\\t\\t\\treturn true;\\n\\t\\t} else if (evaluators.length == 3) {\\n\\t\\t\\tfor (uint i = 0; i < selectedEvaluators.length; i++) {\\n\\t\\t\\t\\t// pushComm.sendNotification(\\n\\t\\t\\t\\t// \\t0xaA7880DB88D8e051428b5204817e58D8327340De, // from channel\\n\\t\\t\\t\\t// \\tselectedEvaluators[i], // to address\\n\\t\\t\\t\\t// \\tbytes(\\n\\t\\t\\t\\t// \\t\\tstring(\\n\\t\\t\\t\\t// \\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t// \\t\\t\\t\\t'0',\\n\\t\\t\\t\\t// \\t\\t\\t\\t'+',\\n\\t\\t\\t\\t// \\t\\t\\t\\t'3',\\n\\t\\t\\t\\t// \\t\\t\\t\\t'+',\\n\\t\\t\\t\\t// \\t\\t\\t\\t'Congrats!',\\n\\t\\t\\t\\t// \\t\\t\\t\\t'+',\\n\\t\\t\\t\\t// \\t\\t\\t\\t'You have just become an evaluator for: ',\\n\\t\\t\\t\\t// \\t\\t\\t\\towner().toHexString(),\\n\\t\\t\\t\\t// \\t\\t\\t\\t' project'\\n\\t\\t\\t\\t// \\t\\t\\t)\\n\\t\\t\\t\\t// \\t\\t)\\n\\t\\t\\t\\t// \\t)\\n\\t\\t\\t\\t// );\\n\\t\\t\\t}\\n\\n\\t\\t\\temit SelectedEvaluators(evaluators);\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction evaluateEvidence(\\n\\t\\tbool[] memory _images,\\n\\t\\tbool _georeference,\\n\\t\\tbool _document,\\n\\t\\tbool[] memory _links\\n\\t) external {\\n\\t\\trequire(openForEvaluate, 'evaluateEvidence: The evaluation period is over');\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp > deadline && block.timestamp < evaluationTime,\\n\\t\\t\\t'evaluateEvidence: The selection period is not over'\\n\\t\\t);\\n\\t\\trequire(_images.length == 3, 'evaluateEvidence: The images are not 3');\\n\\t\\trequire(_links.length == 3, 'evaluateEvidence: The links are not 3');\\n\\t\\trequire(!evidence.equal(''), 'evaluateEvidence: The evidence is empty');\\n\\t\\trequire(isEvaluator[msg.sender], 'evaluateEvidence: Not an evaluator');\\n\\t\\trequire(!isJudged[msg.sender], 'evaluateEvidence: Already evaluated');\\n\\n\\t\\tjudges[msg.sender] = Judge(_images, _georeference, _document, _links);\\n\\t\\tisJudged[msg.sender] = true;\\n\\t\\tallJudges.push(judges[msg.sender]);\\n\\n\\t\\tevaluationCounter++;\\n\\n\\t\\tif (evaluationCounter == 3) {\\n\\t\\t\\tfor (uint i = 0; i < selectedEvaluators.length; i++) {\\n\\t\\t\\t\\t(bool response, ) = selectedEvaluators[i].call{value: bounty / 3}('');\\n\\t\\t\\t\\trequire(response, 'evaluateEvidence: Transfer failed');\\n\\n\\t\\t\\t\\tif (selectedEvaluators[i] != msg.sender) {\\n\\t\\t\\t\\t\\t// pushComm.sendNotification(\\n\\t\\t\\t\\t\\t// \\t0xaA7880DB88D8e051428b5204817e58D8327340De, // from channel\\n\\t\\t\\t\\t\\t// \\tselectedEvaluators[i], // to address\\n\\t\\t\\t\\t\\t// \\tbytes(\\n\\t\\t\\t\\t\\t// \\t\\tstring(\\n\\t\\t\\t\\t\\t// \\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t// \\t\\t\\t\\t'0',\\n\\t\\t\\t\\t\\t// \\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t// \\t\\t\\t\\t'3',\\n\\t\\t\\t\\t\\t// \\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t// \\t\\t\\t\\t'Congrats!',\\n\\t\\t\\t\\t\\t// \\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t// \\t\\t\\t\\t'You have just receiver a bounty of ',\\n\\t\\t\\t\\t\\t// \\t\\t\\t\\t(bounty / 3).toString(),\\n\\t\\t\\t\\t\\t// \\t\\t\\t\\t' for evaluating: ',\\n\\t\\t\\t\\t\\t// \\t\\t\\t\\taddress(this).toHexString(),\\n\\t\\t\\t\\t\\t// \\t\\t\\t\\t' project'\\n\\t\\t\\t\\t\\t// \\t\\t\\t)\\n\\t\\t\\t\\t\\t// \\t\\t)\\n\\t\\t\\t\\t\\t// \\t)\\n\\t\\t\\t\\t\\t// );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t(bool response, ) = owner().call(\\n\\t\\t\\t\\tabi.encodeWithSignature(\\n\\t\\t\\t\\t\\t'setProjectStatus(address,uint8)',\\n\\t\\t\\t\\t\\tcreator,\\n\\t\\t\\t\\t\\tuint8(2)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t\\trequire(response, 'evaluateEvidence: Set project status failed');\\n\\n\\t\\t\\topenForEvaluate = false;\\n\\t\\t}\\n\\t}\\n\\n\\t// ************************ //\\n\\t// *  Getters y Setters   * //\\n\\t// ************************ //\\n\\n\\tfunction getAllJudges() external view returns (Judge[] memory) {\\n\\t\\tJudge[] memory _judges = new Judge[](evaluators.length);\\n\\n\\t\\tif (evaluators.length == 0) return _judges;\\n\\n\\t\\tfor (uint i = 0; i < evaluators.length; i++) {\\n\\t\\t\\t_judges[i] = judges[evaluators[i]];\\n\\t\\t}\\n\\n\\t\\treturn _judges;\\n\\t}\\n\\n\\tfunction getAllEvaluatorsSelected() external view returns (address[] memory) {\\n\\t\\treturn selectedEvaluators;\\n\\t}\\n\\n\\tfunction setEvidence(string memory _evidence) external onlyCreator {\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp >= projectTime[uint(createProjectArgs.end)],\\n\\t\\t\\t'setEvidence: The project has ended'\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp < evaluationTime,\\n\\t\\t\\t'setEvidence: The evaluation period has ended'\\n\\t\\t);\\n\\n\\t\\tfor (uint i = 0; i < selectedEvaluators.length; i++) {\\n\\t\\t\\t// pushComm.sendNotification(\\n\\t\\t\\t// \\t0xaA7880DB88D8e051428b5204817e58D8327340De, // from channel\\n\\t\\t\\t// \\tselectedEvaluators[i], // to address\\n\\t\\t\\t// \\tbytes(\\n\\t\\t\\t// \\t\\tstring(\\n\\t\\t\\t// \\t\\t\\tabi.encodePacked(\\n\\t\\t\\t// \\t\\t\\t\\t'0',\\n\\t\\t\\t// \\t\\t\\t\\t'+',\\n\\t\\t\\t// \\t\\t\\t\\t'3',\\n\\t\\t\\t// \\t\\t\\t\\t'+',\\n\\t\\t\\t// \\t\\t\\t\\t'Evidence updated!',\\n\\t\\t\\t// \\t\\t\\t\\t'+',\\n\\t\\t\\t// \\t\\t\\t\\t'The project evendence just got updated: ',\\n\\t\\t\\t// \\t\\t\\t\\towner().toHexString()\\n\\t\\t\\t// \\t\\t\\t)\\n\\t\\t\\t// \\t\\t)\\n\\t\\t\\t// \\t)\\n\\t\\t\\t// );\\n\\t\\t}\\n\\n\\t\\tevidence = _evidence;\\n\\t}\\n\\n\\tfunction setSelectedEvaluators(\\n\\t\\taddress[] memory _selectedEvaluators\\n\\t) external {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == address(vrfConsumer),\\n\\t\\t\\t'setSelectedEvaluators: Not the VRF contract'\\n\\t\\t);\\n\\n\\t\\tfor (uint i = 0; i < _selectedEvaluators.length; i++) {\\n\\t\\t\\t// pushComm.sendNotification(\\n\\t\\t\\t// \\t0xaA7880DB88D8e051428b5204817e58D8327340De, // from channel\\n\\t\\t\\t// \\t_selectedEvaluators[i], // to address\\n\\t\\t\\t// \\tbytes(\\n\\t\\t\\t// \\t\\tstring(\\n\\t\\t\\t// \\t\\t\\tabi.encodePacked(\\n\\t\\t\\t// \\t\\t\\t\\t'0',\\n\\t\\t\\t// \\t\\t\\t\\t'+',\\n\\t\\t\\t// \\t\\t\\t\\t'3',\\n\\t\\t\\t// \\t\\t\\t\\t'+',\\n\\t\\t\\t// \\t\\t\\t\\t'Congrats!',\\n\\t\\t\\t// \\t\\t\\t\\t'+',\\n\\t\\t\\t// \\t\\t\\t\\t'You have just become an evaluator for: ',\\n\\t\\t\\t// \\t\\t\\t\\towner().toHexString(),\\n\\t\\t\\t// \\t\\t\\t\\t' project'\\n\\t\\t\\t// \\t\\t\\t)\\n\\t\\t\\t// \\t\\t)\\n\\t\\t\\t// \\t)\\n\\t\\t\\t// );\\n\\t\\t}\\n\\n\\t\\tselectedEvaluators = _selectedEvaluators;\\n\\n\\t\\temit SelectedEvaluators(_selectedEvaluators);\\n\\t}\\n}\\n\",\"keccak256\":\"0x47beb288c9dc4d0393b29b420d644802387c59d4f2f60869736fe5b3cfc68cc9\",\"license\":\"MIT\"},\"contracts/NatureLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport './Crowdfunding.sol';\\nimport './Evaluation.sol';\\n\\nimport './enums/enums.sol';\\nimport './interfaces/IHypercerts.sol';\\nimport './interfaces/IVRFv2Consumer.sol';\\nimport './interfaces/IPUSHCommInterface.sol';\\n\\ncontract NatureLink is Ownable {\\n\\tIHypercerts public immutable hypercerts;\\n\\tIVRFv2Consumer public immutable vrfConsumer;\\n\\tIPUSHCommInterface public immutable pushComm;\\n\\n\\taddress public treasury;\\n\\taddress[] public users;\\n\\n\\tstruct Portfolio {\\n\\t\\tuint projectIdCounter;\\n\\t\\tProject[] projects;\\n\\t}\\n\\n\\tstruct Project {\\n\\t\\tuint id;\\n\\t\\tuint amount;\\n\\t\\tuint[] projectTime;\\n\\t\\tstring info;\\n\\t\\tstatus status;\\n\\t\\tCrowdfunding crowdfunding;\\n\\t\\tEvaluation evaluation;\\n\\t\\taddress creator;\\n\\t}\\n\\n\\tmapping(address => bool) public isUser;\\n\\tmapping(address => Portfolio) public portfolios;\\n\\n\\tevent ProjectCreated(\\n\\t\\tuint indexed projectId,\\n\\t\\tuint amount,\\n\\t\\tuint[] projectTime,\\n\\t\\tstring info,\\n\\t\\tuint status,\\n\\t\\taddress indexed crowdfunding,\\n\\t\\taddress indexed evaluation,\\n\\t\\taddress creator\\n\\t);\\n\\n\\tconstructor(\\n\\t\\taddress _vrfConsumerAddress,\\n\\t\\taddress _pushCommAddresspushCommAddress,\\n\\t\\taddress _hypercertsAddress,\\n\\t\\taddress _treasury\\n\\t) {\\n\\t\\thypercerts = IHypercerts(_hypercertsAddress);\\n\\t\\tvrfConsumer = IVRFv2Consumer(_vrfConsumerAddress);\\n\\t\\tpushComm = IPUSHCommInterface(_pushCommAddresspushCommAddress);\\n\\t\\ttreasury = _treasury;\\n\\t}\\n\\n\\t// ************************ //\\n\\t// *      NatureLink      * //\\n\\t// ************************ //\\n\\n\\tfunction createProject(\\n\\t\\tuint _amount,\\n\\t\\tuint _planning,\\n\\t\\tuint[] memory _projectTime,\\n\\t\\tuint _evaluationTime,\\n\\t\\tstring memory _info\\n\\t) public {\\n\\t\\trequire(_amount > 0, 'createProject: Amount must be greater than 0');\\n\\t\\trequire(\\n\\t\\t\\t_planning > block.timestamp,\\n\\t\\t\\t'createProject: Deadline must be greater than current time'\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_projectTime.length == 2,\\n\\t\\t\\t'createProject: Project time must have 2 elements'\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_planning <= _projectTime[uint(createProjectArgs.start)],\\n\\t\\t\\t'createProject: Deadline must be less or equal than project start time'\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_projectTime[uint(createProjectArgs.start)] <\\n\\t\\t\\t\\t_projectTime[uint(createProjectArgs.end)],\\n\\t\\t\\t'createProject: Project start time must be less than project end time'\\n\\t\\t);\\n\\n\\t\\tuint projectId = portfolios[msg.sender].projectIdCounter;\\n\\t\\tprojectId++;\\n\\n\\t\\tportfolios[msg.sender].projectIdCounter = projectId;\\n\\n\\t\\tuint bounty = (_amount * 5) / 100; // 5% of amount\\n\\t\\tuint fee = (bounty * 10) / 100; // 10% of bounty\\n\\n\\t\\tuint evaluationTime = _evaluationTime;\\n\\n\\t\\tCrowdfunding crowdfunding = new Crowdfunding(\\n\\t\\t\\t_amount,\\n\\t\\t\\tbounty,\\n\\t\\t\\tfee,\\n\\t\\t\\t_planning,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\ttreasury,\\n\\t\\t\\taddress(hypercerts),\\n\\t\\t\\taddress(pushComm),\\n\\t\\t\\t_info\\n\\t\\t);\\n\\n\\t\\tEvaluation evaluation = new Evaluation(\\n\\t\\t\\taddress(vrfConsumer),\\n\\t\\t\\taddress(pushComm),\\n\\t\\t\\taddress(crowdfunding),\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_planning,\\n\\t\\t\\t_projectTime,\\n\\t\\t\\tevaluationTime\\n\\t\\t);\\n\\n\\t\\tvrfConsumer.setPermittedEvaluator(address(evaluation), true);\\n\\n\\t\\tcrowdfunding.setEvaluation(address(evaluation));\\n\\t\\tcrowdfunding.transferOwnership(address(this));\\n\\t\\tevaluation.transferOwnership(address(this));\\n\\n\\t\\tProject memory project = Project({\\n\\t\\t\\tid: projectId,\\n\\t\\t\\tamount: _amount,\\n\\t\\t\\tprojectTime: _projectTime,\\n\\t\\t\\tinfo: _info,\\n\\t\\t\\tstatus: status.ongoing,\\n\\t\\t\\tcrowdfunding: crowdfunding,\\n\\t\\t\\tevaluation: evaluation,\\n\\t\\t\\tcreator: msg.sender\\n\\t\\t});\\n\\n\\t\\tif (!isUser[msg.sender]) {\\n\\t\\t\\tisUser[msg.sender] = true;\\n\\t\\t\\tusers.push(msg.sender);\\n\\t\\t}\\n\\n\\t\\tportfolios[msg.sender].projects.push(project);\\n\\n\\t\\temit ProjectCreated(\\n\\t\\t\\tprojectId,\\n\\t\\t\\t_amount,\\n\\t\\t\\t_projectTime,\\n\\t\\t\\t_info,\\n\\t\\t\\tuint(status.ongoing),\\n\\t\\t\\taddress(crowdfunding),\\n\\t\\t\\taddress(evaluation),\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\t}\\n\\n\\tfunction refundStakesForFailedProjects() public {\\n\\t\\tfor (uint i = 0; i < users.length; i++) {\\n\\t\\t\\taddress user = users[i];\\n\\t\\t\\tPortfolio storage portfolio = portfolios[user];\\n\\t\\t\\tfor (uint j = 0; j < portfolio.projects.length; j++) {\\n\\t\\t\\t\\tProject storage project = portfolio.projects[j];\\n\\t\\t\\t\\tif (project.status == status.ongoing) {\\n\\t\\t\\t\\t\\tCrowdfunding crowdfunding = project.crowdfunding;\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\tblock.timestamp > crowdfunding.deadline() &&\\n\\t\\t\\t\\t\\t\\tcrowdfunding.getBalance() < crowdfunding.threshold()\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\tcrowdfunding.refundAll();\\n\\t\\t\\t\\t\\t\\tproject.status = status.failed;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _updateProjectStatus(\\n\\t\\taddress _creator,\\n\\t\\tuint _projectId,\\n\\t\\tstatus _newStatus\\n\\t) private {\\n\\t\\tPortfolio storage portfolio = portfolios[_creator];\\n\\t\\tbool projectFound = false;\\n\\n\\t\\tfor (uint i = 0; i < portfolio.projects.length; i++) {\\n\\t\\t\\tif (portfolio.projects[i].id == _projectId) {\\n\\t\\t\\t\\tportfolio.projects[i].status = _newStatus;\\n\\t\\t\\t\\tprojectFound = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trequire(projectFound, 'Project not found');\\n\\t}\\n\\n\\t// ************************ //\\n\\t// *  Getters y Setters   * //\\n\\t// ************************ //\\n\\n\\tfunction getAllProjects() public view returns (Project[] memory) {\\n\\t\\tuint totalProjectsCount = 0;\\n\\n\\t\\tfor (uint i = 0; i < users.length; i++) {\\n\\t\\t\\ttotalProjectsCount += portfolios[users[i]].projects.length;\\n\\t\\t}\\n\\n\\t\\tProject[] memory allProjects = new Project[](totalProjectsCount);\\n\\n\\t\\tif (users.length == 0) return allProjects;\\n\\n\\t\\tuint counter = 0;\\n\\n\\t\\tfor (uint i = 0; i < users.length; i++) {\\n\\t\\t\\tProject[] memory projects = portfolios[users[i]].projects;\\n\\n\\t\\t\\tfor (uint j = 0; j < projects.length; j++) {\\n\\t\\t\\t\\tallProjects[counter] = projects[j];\\n\\t\\t\\t\\tcounter++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn allProjects;\\n\\t}\\n\\n\\tfunction setProjectStatus(address _creator, status _newStatus) public {\\n\\t\\tPortfolio storage userPortfolio = portfolios[_creator];\\n\\n\\t\\tbool projectFound = false;\\n\\t\\tfor (uint i = 0; i < userPortfolio.projects.length; i++) {\\n\\t\\t\\taddress evaluationAddress = address(userPortfolio.projects[i].evaluation);\\n\\t\\t\\tif (evaluationAddress == msg.sender) {\\n\\t\\t\\t\\tuserPortfolio.projects[i].status = _newStatus;\\n\\t\\t\\t\\tprojectFound = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trequire(projectFound, 'setProjectStatus: Project not found');\\n\\t}\\n\\n\\tfunction setTreasury(address _treasury) public onlyOwner returns (address) {\\n\\t\\ttreasury = _treasury;\\n\\t\\treturn treasury;\\n\\t}\\n}\\n\",\"keccak256\":\"0x4320139997c3dfdb0a27c86c2125f3c32121a1126d7fb57f65b16ae3d5d4a428\",\"license\":\"MIT\"},\"contracts/enums/enums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nenum createProjectArgs {\\n\\tstart,\\n\\tend\\n}\\n\\nenum status {\\n\\tongoing,\\n\\tfailed,\\n\\tsucceeded\\n}\\n\",\"keccak256\":\"0x7c671cf84e48f0e657e4e92688bd9ae2fbef64c871c61087f4b44fcef245c311\",\"license\":\"MIT\"},\"contracts/interfaces/ICrowdfunding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ICrowdfunding {\\n\\tfunction withdrawForAll() external returns (bool);\\n}\\n\",\"keccak256\":\"0x97246fec7e582ae6776037b76ec11ffd343d084bc33ef91a26a17ef09109bbc8\",\"license\":\"MIT\"},\"contracts/interfaces/IEvaluation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IEvaluation {\\n\\tfunction selectEvaluators() external returns (bool);\\n\\n\\tfunction setSelectedEvaluators(address[] memory _selectedEvaluators) external;\\n}\\n\",\"keccak256\":\"0xc319e3da19522927af8079f0cab9dd3bdec04a661e56e3dde705eecc5a2970cb\",\"license\":\"MIT\"},\"contracts/interfaces/IHypercerts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\ninterface IHypercerts is IERC1155 {\\n\\tfunction mint(\\n\\t\\taddress account,\\n\\t\\tuint id,\\n\\t\\tuint amount,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory uri\\n\\t) external returns (uint);\\n\\n\\tfunction mintBatch(\\n\\t\\taddress to,\\n\\t\\tuint[] memory ids,\\n\\t\\tuint[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) external;\\n\\n\\tfunction fractionateToken(\\n\\t\\taddress from,\\n\\t\\taddress[] calldata recipients,\\n\\t\\tuint tokenId,\\n\\t\\tuint[] calldata fractions,\\n\\t\\tbytes memory data\\n\\t) external;\\n}\\n\",\"keccak256\":\"0x1a31be72e5bae5c7bac3bc677324756c2fc0aa97943c7ee676dc76c4426f7984\",\"license\":\"MIT\"},\"contracts/interfaces/IPUSHCommInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// PUSH Comm Contract Interface\\ninterface IPUSHCommInterface {\\n\\tfunction sendNotification(\\n\\t\\taddress _channel,\\n\\t\\taddress _recipient,\\n\\t\\tbytes calldata _identity\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xf979e927a870830d182df45e2b1545520d7781c0e2012738b115a709b1b9e95a\",\"license\":\"MIT\"},\"contracts/interfaces/IVRFv2Consumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IVRFv2Consumer {\\n\\tfunction requestRandomWords(\\n\\t\\tuint32 _numWords,\\n\\t\\taddress _evaluatorContract,\\n\\t\\taddress[] memory _evaluators\\n\\t) external returns (uint requestId);\\n\\n\\tfunction setPermittedEvaluator(address _evaluator, bool _permitted) external;\\n}\\n\",\"keccak256\":\"0xb8f8f911fb4de2be363776b9b8c9e690bf411b2925893616059f6b2dceb6c438\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162006146380380620061468339810160408190526200003491620000e4565b6200003f3362000077565b6001600160a01b0391821660805292811660a05290811660c052600180546001600160a01b0319169290911691909117905562000141565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000df57600080fd5b919050565b60008060008060808587031215620000fb57600080fd5b6200010685620000c7565b93506200011660208601620000c7565b92506200012660408601620000c7565b91506200013660608601620000c7565b905092959194509250565b60805160a05160c051615fb2620001946000396000818161026301528181610b620152610be901526000818161011401528181610bc80152610c740152600081816101a70152610b410152615fb26000f3fe60806040523480156200001157600080fd5b5060043610620001095760003560e01c80637baab3da11620000a3578063c76aa072116200006e578063c76aa0721462000285578063c9043165146200029c578063f0f4426014620002a6578063f2fde38b14620002bd57600080fd5b80637baab3da146200020057806380d0382914620002325780638da5cb5b146200024b578063bc61495b146200025d57600080fd5b80635c321ea811620000e45780635c321ea814620001a157806361d027b314620001c957806364f9154214620001dd578063715018a614620001f657600080fd5b80631ef4d1fd146200010e578063365b98b214620001535780634209fff1146200016a575b600080fd5b620001367f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6200013662000164366004620014f6565b620002d4565b620001906200017b36600462001526565b60036020526000908152604090205460ff1681565b60405190151581526020016200014a565b620001367f000000000000000000000000000000000000000000000000000000000000000081565b60015462000136906001600160a01b031681565b620001f4620001ee3660046200154d565b620002ff565b005b620001f46200043d565b620002236200021136600462001526565b60046020526000908152604090205481565b6040519081526020016200014a565b6200023c62000455565b6040516200014a91906200160f565b6000546001600160a01b031662000136565b620001367f000000000000000000000000000000000000000000000000000000000000000081565b620001f462000296366004620017e1565b620007ee565b620001f462001025565b62000136620002b736600462001526565b620012c3565b620001f4620002ce36600462001526565b620012f2565b60028181548110620002e557600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038216600090815260046020526040812090805b6001830154811015620003d7576000836001018281548110620003415762000341620018d6565b60009182526020909120600560079092020101546001600160a01b03169050338103620003c15784846001018381548110620003815762000381620018d6565b60009182526020909120600460079092020101805460ff19166001836002811115620003b157620003b1620015d6565b02179055506001925050620003d7565b5080620003ce8162001902565b9150506200031a565b5080620004375760405162461bcd60e51b815260206004820152602360248201527f73657450726f6a6563745374617475733a2050726f6a656374206e6f7420666f6044820152621d5b9960ea1b60648201526084015b60405180910390fd5b50505050565b620004476200136e565b620004536000620013ca565b565b60606000805b600254811015620004cb576004600060028381548110620004805762000480620018d6565b60009182526020808320909101546001600160a01b03168352820192909252604001902060010154620004b490836200191e565b915080620004c28162001902565b9150506200045b565b5060008167ffffffffffffffff811115620004ea57620004ea62001720565b6040519080825280602002602001820160405280156200052757816020015b620005136200141a565b815260200190600190039081620005095790505b506002549091506000036200053c5792915050565b6000805b600254811015620007e55760006004600060028481548110620005675762000567620018d6565b60009182526020808320909101546001600160a01b031683528281019390935260409182018120600101805483518186028101860190945280845292939092919084015b82821015620007575783829060005260206000209060070201604051806101000160405290816000820154815260200160018201548152602001600282018054806020026020016040519081016040528092919081815260200182805480156200063557602002820191906000526020600020905b81548152602001906001019080831162000620575b5050505050815260200160038201805462000650906200193a565b80601f01602080910402602001604051908101604052809291908181526020018280546200067e906200193a565b8015620006cf5780601f10620006a357610100808354040283529160200191620006cf565b820191906000526020600020905b815481529060010190602001808311620006b157829003601f168201915b5050509183525050600482015460209091019060ff166002811115620006f957620006f9620015d6565b60028111156200070d576200070d620015d6565b815260048201546001600160a01b036101009091048116602080840191909152600584015482166040840152600690930154166060909101529082526001929092019101620005ab565b50505050905060005b8151811015620007cd578181815181106200077f576200077f620018d6565b60200260200101518585815181106200079c576200079c620018d6565b60200260200101819052508380620007b49062001902565b9450508080620007c49062001902565b91505062000760565b50508080620007dc9062001902565b91505062000540565b50909392505050565b60008511620008555760405162461bcd60e51b815260206004820152602c60248201527f63726561746550726f6a6563743a20416d6f756e74206d75737420626520677260448201526b06561746572207468616e20360a41b60648201526084016200042e565b428411620008cc5760405162461bcd60e51b815260206004820152603960248201527f63726561746550726f6a6563743a20446561646c696e65206d7573742062652060448201527f67726561746572207468616e2063757272656e742074696d650000000000000060648201526084016200042e565b8251600214620009385760405162461bcd60e51b815260206004820152603060248201527f63726561746550726f6a6563743a2050726f6a6563742074696d65206d75737460448201526f2068617665203220656c656d656e747360801b60648201526084016200042e565b826000815181106200094e576200094e620018d6565b6020026020010151841115620009db5760405162461bcd60e51b815260206004820152604560248201527f63726561746550726f6a6563743a20446561646c696e65206d7573742062652060448201527f6c657373206f7220657175616c207468616e2070726f6a6563742073746172746064820152642074696d6560d81b608482015260a4016200042e565b82600181518110620009f157620009f1620018d6565b6020026020010151836000600181111562000a105762000a10620015d6565b8151811062000a235762000a23620018d6565b60200260200101511062000aae5760405162461bcd60e51b8152602060048201526044602482018190527f63726561746550726f6a6563743a2050726f6a6563742073746172742074696d908201527f65206d757374206265206c657373207468616e2070726f6a65637420656e642060648201526374696d6560e01b608482015260a4016200042e565b336000908152600460205260409020548062000aca8162001902565b3360009081526004602052604081208290559092509050606462000af088600562001976565b62000afc919062001990565b90506000606462000b0f83600a62001976565b62000b1b919062001990565b9050600085905060008984848b33600160009054906101000a90046001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008d60405162000b909062001473565b62000ba499989796959493929190620019b3565b604051809103906000f08015801562000bc1573d6000803e3d6000fd5b50905060007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083338d8d8860405162000c1b9062001481565b62000c2d979695949392919062001a5b565b604051809103906000f08015801562000c4a573d6000803e3d6000fd5b50604051632fba153f60e11b81526001600160a01b038083166004830152600160248301529192507f000000000000000000000000000000000000000000000000000000000000000090911690635f742a7e90604401600060405180830381600087803b15801562000cbb57600080fd5b505af115801562000cd0573d6000803e3d6000fd5b5050604051630f5f3c2b60e31b81526001600160a01b03848116600483015285169250637af9e15891506024016020604051808303816000875af115801562000d1d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d43919062001ab4565b5060405163f2fde38b60e01b81523060048201526001600160a01b0383169063f2fde38b90602401600060405180830381600087803b15801562000d8657600080fd5b505af115801562000d9b573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523060048201526001600160a01b038416925063f2fde38b9150602401600060405180830381600087803b15801562000de157600080fd5b505af115801562000df6573d6000803e3d6000fd5b5050505060006040518061010001604052808881526020018d81526020018b81526020018981526020016000600281111562000e365762000e36620015d6565b81526001600160a01b038086166020808401919091529085166040808401919091523360609093018390526000928352600390915290205490915060ff1662000ed657336000818152600360205260408120805460ff191660019081179091556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b03191690911790555b3360009081526004602090815260408083206001908101805480830182559085529383902085516007909502019384558483015190840155830151805184939262000f299260028501929101906200148f565b506060820151600382019062000f40908262001b27565b50608082015160048201805460ff1916600183600281111562000f675762000f67620015d6565b021790555060a08201516004820180546001600160a01b0392831661010002610100600160a81b031990911617905560c08301516005830180549183166001600160a01b031992831617905560e090930151600690920180549282169290931691909117909155828116908416887fb547b8943914ca765ec0f833455114c104183e93d66a2cb9ea9f8372f15e32eb8f8e8d6000336040516200100f95949392919062001bf4565b60405180910390a4505050505050505050505050565b60005b600254811015620012c0576000600282815481106200104b576200104b620018d6565b60009182526020808320909101546001600160a01b0316808352600490915260408220909250905b6001820154811015620012a75760008260010182815481106200109a576200109a620018d6565b6000918252602082206007909102019150600482015460ff166002811115620010c757620010c7620015d6565b03620012915760008160040160019054906101000a90046001600160a01b03169050806001600160a01b03166329dcb0cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001128573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200114e919062001c46565b42118015620012245750806001600160a01b03166342cde4e86040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001197573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011bd919062001c46565b816001600160a01b03166312065fe06040518163ffffffff1660e01b8152600401602060405180830381865afa158015620011fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001222919062001c46565b105b156200128f57806001600160a01b03166338e771ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200126657600080fd5b505af11580156200127b573d6000803e3d6000fd5b5050505060048201805460ff191660011790555b505b50806200129e8162001902565b91505062001073565b5050508080620012b79062001902565b91505062001028565b50565b6000620012cf6200136e565b50600180546001600160a01b0319166001600160a01b0392909216918217905590565b620012fc6200136e565b6001600160a01b038116620013635760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200042e565b620012c081620013ca565b6000546001600160a01b03163314620004535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200042e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518061010001604052806000815260200160008152602001606081526020016060815260200160006002811115620014585762001458620015d6565b81526000602082018190526040820181905260609091015290565b611e778062001c6183390190565b6124a58062003ad883390190565b828054828255906000526020600020908101928215620014cd579160200282015b82811115620014cd578251825591602001919060010190620014b0565b50620014db929150620014df565b5090565b5b80821115620014db5760008155600101620014e0565b6000602082840312156200150957600080fd5b5035919050565b6001600160a01b0381168114620012c057600080fd5b6000602082840312156200153957600080fd5b8135620015468162001510565b9392505050565b600080604083850312156200156157600080fd5b82356200156e8162001510565b91506020830135600381106200158357600080fd5b809150509250929050565b6000815180845260005b81811015620015b65760208185018101518683018201520162001598565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b600381106200160b57634e487b7160e01b600052602160045260246000fd5b9052565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156200171157898403603f1901865282518051855288810151898601528781015161010089870181905281519087018190526101208701918b019085905b808210156200169a5782518452928c0192918c01916001919091019062001678565b50505060608083015187830382890152620016b683826200158e565b92505050608080830151620016ce82890182620015ec565b505060a0828101516001600160a01b039081169188019190915260c08084015182169088015260e092830151169190950152948701949187019160010162001637565b50919998505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562001762576200176262001720565b604052919050565b600082601f8301126200177c57600080fd5b813567ffffffffffffffff81111562001799576200179962001720565b620017ae601f8201601f191660200162001736565b818152846020838601011115620017c457600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215620017fa57600080fd5b853594506020808701359450604087013567ffffffffffffffff808211156200182257600080fd5b818901915089601f8301126200183757600080fd5b8135818111156200184c576200184c62001720565b8060051b6200185d85820162001736565b918252838101850191858101908d8411156200187857600080fd5b948601945b8386101562001898578535825294860194908601906200187d565b9850505050606089013594506080890135925080831115620018b957600080fd5b5050620018c9888289016200176a565b9150509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620019175762001917620018ec565b5060010190565b80820180821115620019345762001934620018ec565b92915050565b600181811c908216806200194f57607f821691505b6020821081036200197057634e487b7160e01b600052602260045260246000fd5b50919050565b8082028115828204841417620019345762001934620018ec565b600082620019ae57634e487b7160e01b600052601260045260246000fd5b500490565b8981526020810189905260408101889052606081018790526001600160a01b03868116608083015285811660a083015284811660c0830152831660e0820152610120610100820181905260009062001a0e838201856200158e565b9c9b505050505050505050505050565b600081518084526020808501945080840160005b8381101562001a505781518752958201959082019060010162001a32565b509495945050505050565b6001600160a01b03888116825287811660208301528681166040830152851660608201526080810184905260e060a0820181905260009062001aa09083018562001a1e565b90508260c083015298975050505050505050565b60006020828403121562001ac757600080fd5b8151620015468162001510565b601f82111562001b2257600081815260208120601f850160051c8101602086101562001afd5750805b601f850160051c820191505b8181101562001b1e5782815560010162001b09565b5050505b505050565b815167ffffffffffffffff81111562001b445762001b4462001720565b62001b5c8162001b5584546200193a565b8462001ad4565b602080601f83116001811462001b94576000841562001b7b5750858301515b600019600386901b1c1916600185901b17855562001b1e565b600085815260208120601f198616915b8281101562001bc55788860151825594840194600190910190840162001ba4565b508582101562001be45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b85815260a06020820152600062001c0f60a083018762001a1e565b828103604084015262001c2381876200158e565b606084019590955250506001600160a01b03919091166080909101529392505050565b60006020828403121562001c5957600080fd5b505191905056fe60806040526000805461ffff60a01b1916600160a01b1790553480156200002557600080fd5b5060405162001e7738038062001e77833981016040819052620000489162000251565b6200005333620001ce565b60008911620000cf5760405162461bcd60e51b815260206004820152603660248201527f636f6e7374727563746f7243726f776466756e64696e673a20616d6f756e742060448201527f6d7573742062652067726561746572207468616e20300000000000000000000060648201526084015b60405180910390fd5b428611620001525760405162461bcd60e51b815260206004820152604360248201527f636f6e7374727563746f7243726f776466756e64696e673a20646561646c696e60448201527f65206d7573742062652067726561746572207468616e2063757272656e742074606482015262696d6560e81b608482015260a401620000c6565b6002899055600388905560048790556001869055600980546001600160a01b038088166001600160a01b031992831617909255600a8054878416908316179055600680548684169083161790556008805492851692909116919091179055600c620001be82826200042b565b50505050505050505050620004f7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200023657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060008060006101208a8c0312156200027157600080fd5b8951985060208a0151975060408a0151965060608a015195506200029860808b016200021e565b9450620002a860a08b016200021e565b9350620002b860c08b016200021e565b9250620002c860e08b016200021e565b6101008b01519092506001600160401b0380821115620002e757600080fd5b818c0191508c601f830112620002fc57600080fd5b8151818111156200031157620003116200023b565b604051601f8201601f19908116603f011681019083821181831017156200033c576200033c6200023b565b816040528281528f60208487010111156200035657600080fd5b600093505b828410156200037e5760208486010151602085830101526020840193506200035b565b60006020848301015280955050505050509295985092959850929598565b600181811c90821680620003b157607f821691505b602082108103620003d257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200042657600081815260208120601f850160051c81016020861015620004015750805b601f850160051c820191505b8181101562000422578281556001016200040d565b5050505b505050565b81516001600160401b038111156200044757620004476200023b565b6200045f816200045884546200039c565b84620003d8565b602080601f8311600181146200049757600084156200047e5750858301515b600019600386901b1c1916600185901b17855562000422565b600085815260208120601f198616915b82811015620004c857888601518255948401946001909101908401620004a7565b5085821015620004e75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61197080620005076000396000f3fe6080604052600436106101d15760003560e01c80636b1a91ee116100f7578063bc197c8111610095578063ddca3f4311610064578063ddca3f431461054b578063f23a6e6114610561578063f2fde38b146105a7578063fd5e6dd1146105c757600080fd5b8063bc197c8114610495578063bc61495b146104f6578063bfb29f3714610516578063c5f956af1461052b57600080fd5b80638da5cb5b116100d15780638da5cb5b1461042a578063943dfef1146104485780639876a6431461045e57806398bdf6f51461047f57600080fd5b80636b1a91ee146103d4578063715018a6146103f55780637af9e1581461040a57600080fd5b80632af5c9191161016f57806342cde4e81161013e57806342cde4e81461036757806343352d611461037d5780635c321ea81461039f57806361461954146103bf57600080fd5b80632af5c91914610308578063370158ea1461032857806338e771ab1461034a5780633a4b66f11461035f57600080fd5b80631300a6d1116101ab5780631300a6d1146102805780631d0d35f51461029557806327e235e3146102c557806329dcb0cf146102f257600080fd5b806301ffc9a7146101e557806302d05d3f1461022b57806312065fe01461026357600080fd5b366101e0576101de6105e7565b005b600080fd5b3480156101f157600080fd5b50610216610200366004611399565b6001600160e01b031916630271189760e51b1490565b60405190151581526020015b60405180910390f35b34801561023757600080fd5b5060095461024b906001600160a01b031681565b6040516001600160a01b039091168152602001610222565b34801561026f57600080fd5b50475b604051908152602001610222565b34801561028c57600080fd5b50610272610895565b3480156102a157600080fd5b506102166102b03660046113da565b600e6020526000908152604090205460ff1681565b3480156102d157600080fd5b506102726102e03660046113da565b600d6020526000908152604090205481565b3480156102fe57600080fd5b5061027260015481565b34801561031457600080fd5b5060075461024b906001600160a01b031681565b34801561033457600080fd5b5061033d6108ba565b604051610222919061143b565b34801561035657600080fd5b506101de610948565b6101de6105e7565b34801561037357600080fd5b5061027260025481565b34801561038957600080fd5b50610392610af7565b604051610222919061144e565b3480156103ab57600080fd5b5060065461024b906001600160a01b031681565b3480156103cb57600080fd5b506101de610b59565b3480156103e057600080fd5b5060005461021690600160a01b900460ff1681565b34801561040157600080fd5b506101de6111c4565b34801561041657600080fd5b5061024b6104253660046113da565b6111d8565b34801561043657600080fd5b506000546001600160a01b031661024b565b34801561045457600080fd5b5061027260035481565b34801561046a57600080fd5b5060005461021690600160a81b900460ff1681565b34801561048b57600080fd5b5061027260055481565b3480156104a157600080fd5b506104dd6104b0366004611529565b7fbc197c819b3e337a6f9652dd10becd7eef83032af3b9d958d3d42f669414662198975050505050505050565b6040516001600160e01b03199091168152602001610222565b34801561050257600080fd5b5060085461024b906001600160a01b031681565b34801561052257600080fd5b50610272611207565b34801561053757600080fd5b50600a5461024b906001600160a01b031681565b34801561055757600080fd5b5061027260045481565b34801561056d57600080fd5b506104dd61057c3660046115e4565b7ff23a6e612e1ff4830e658fe43f4e3cb4a5f8170bd5d9e69fb5d7a7fa9e4fdf979695505050505050565b3480156105b357600080fd5b506101de6105c23660046113da565b611217565b3480156105d357600080fd5b5061024b6105e236600461165c565b61128d565b6009546001600160a01b031633036106465760405162461bcd60e51b815260206004820152601f60248201527f7374616b653a207468652063726561746f722063616e6e6f74207374616b650060448201526064015b60405180910390fd5b600054600160a01b900460ff1661069f5760405162461bcd60e51b815260206004820152601b60248201527f7374616b653a20746865207374616b657220697320636c6f7365640000000000604482015260640161063d565b60015442106106f05760405162461bcd60e51b815260206004820152601d60248201527f7374616b653a20746865207374616b652074696d65206973206f766572000000604482015260640161063d565b600034116107535760405162461bcd60e51b815260206004820152602a60248201527f7374616b653a207374616b6520616d6f756e74206d75737420626520677265616044820152690746572207468616e20360b41b606482015260840161063d565b6002544711156107a55760405162461bcd60e51b815260206004820152601d60248201527f7374616b653a20657863656564656420746865207468726573686f6c64000000604482015260640161063d565b60025447036107c3576000805461ffff60a01b1916600160a81b1790555b336000908152600e602052604090205460ff1661083757336000818152600e60205260408120805460ff19166001908117909155600b805491820181559091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b03191690911790555b336000908152600d60205260408120805434929061085690849061168b565b9091555050604080513381523460208201527febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a910160405180910390a1565b60006001544210156108b457426001546108af91906116a4565b905090565b50600090565b600c80546108c7906116b7565b80601f01602080910402602001604051908101604052809291908181526020018280546108f3906116b7565b80156109405780601f1061091557610100808354040283529160200191610940565b820191906000526020600020905b81548152906001019060200180831161092357829003601f168201915b505050505081565b60025447106109a45760405162461bcd60e51b815260206004820152602260248201527f43726f776466756e64696e673a204e6f20726566756e647320617661696c61626044820152616c6560f01b606482015260840161063d565b60005b600b54811015610af4576000600b82815481106109c6576109c66116f1565b60009182526020808320909101546001600160a01b0316808352600d9091526040909120549091508015610adf576001600160a01b0382166000818152600d60205260408082208290555190919083908381818185875af1925050503d8060008114610a4e576040519150601f19603f3d011682016040523d82523d6000602084013e610a53565b606091505b5050905080610a9b5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b604482015260640161063d565b604080516001600160a01b0385168152602081018490527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364910160405180910390a1505b50508080610aec90611707565b9150506109a7565b50565b6060600b805480602002602001604051908101604052809291908181526020018280548015610b4f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b31575b5050505050905090565b6009546001600160a01b03163314610bc25760405162461bcd60e51b815260206004820152602660248201527f6f6e6c7943726561746f723a2063616c6c6572206973206e6f742074686520636044820152653932b0ba37b960d11b606482015260840161063d565b600054600160a81b900460ff16610c1b5760405162461bcd60e51b815260206004820152601f60248201527f657865637574653a2074686520776974686472617720697320636c6f73656400604482015260640161063d565b600154421015610c795760405162461bcd60e51b8152602060048201526024808201527f657865637574653a2074686520646561646c696e6520686173206e6f742070616044820152631cdcd95960e21b606482015260840161063d565b6002544714610cda5760405162461bcd60e51b815260206004820152602760248201527f657865637574653a20746865207468726573686f6c6420686173206e6f74206260448201526619595b881b595d60ca1b606482015260840161063d565b6007546040805163e141480d60e01b815290516000926001600160a01b03169163e141480d916004808301926020929190829003018187875af1158015610d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d499190611720565b905080610da45760405162461bcd60e51b8152602060048201526024808201527f657865637574653a206661696c656420746f2073656c656374206576616c7561604482015263746f727360e01b606482015260840161063d565b600b5460009067ffffffffffffffff811115610dc257610dc2611742565b604051908082528060200260200182016040528015610deb578160200160208202803683370190505b50905060005b600b54811015610e65576000600b8281548110610e1057610e106116f1565b60009182526020822001546001600160a01b03169150610e2f826112b7565b905080848481518110610e4457610e446116f1565b60200260200101818152505050508080610e5d90611707565b915050610df1565b50600654600554604080516000808252602082019283905263c1341c4f60e01b90925290926001600160a01b03169163c1341c4f91610eae913091606490600c60248201611758565b6020604051808303816000875af1158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef19190611836565b600580549192506000610f0383611707565b90915550506006546040805160008152602081019182905263864c1cd960e01b9091526001600160a01b039091169063864c1cd990610f4e903090600b90869088906024810161184f565b600060405180830381600087803b158015610f6857600080fd5b505af1158015610f7c573d6000803e3d6000fd5b5050600a54600454604051600094506001600160a01b039092169250908381818185875af1925050503d8060008114610fd1576040519150601f19603f3d011682016040523d82523d6000602084013e610fd6565b606091505b50509050806110395760405162461bcd60e51b815260206004820152602960248201527f657865637574653a206661696c656420746f2073656e6420657468657220746f60448201526820747265617375727960b81b606482015260840161063d565b600060045460035461104b91906116a4565b6007546040519192506000916001600160a01b039091169083908381818185875af1925050503d806000811461109d576040519150601f19603f3d011682016040523d82523d6000602084013e6110a2565b606091505b50509050806111075760405162461bcd60e51b815260206004820152602b60248201527f657865637574653a206661696c656420746f2073656e6420657468657220746f60448201526a1032bb30b63ab0ba34b7b760a91b606482015260840161063d565b604051600090339047908381818185875af1925050503d8060008114611149576040519150601f19603f3d011682016040523d82523d6000602084013e61114e565b606091505b50509050806111ae5760405162461bcd60e51b815260206004820152602660248201527f657865637574653a206661696c656420746f2073656e6420657468657220746f6044820152651037bbb732b960d11b606482015260840161063d565b50506000805460ff60a81b191690555050505050565b6111cc6112ef565b6111d66000611349565b565b60006111e26112ef565b50600780546001600160a01b0319166001600160a01b0383169081179091555b919050565b6000476002546108af91906116a4565b61121f6112ef565b6001600160a01b0381166112845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161063d565b610af481611349565b600b818154811061129d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0381166000908152600d60205260408120546002546112de826064611901565b6112e89190611918565b9392505050565b6000546001600160a01b031633146111d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156113ab57600080fd5b81356001600160e01b0319811681146112e857600080fd5b80356001600160a01b038116811461120257600080fd5b6000602082840312156113ec57600080fd5b6112e8826113c3565b6000815180845260005b8181101561141b576020818501810151868301820152016113ff565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006112e860208301846113f5565b6020808252825182820181905260009190848201906040850190845b8181101561148f5783516001600160a01b03168352928401929184019160010161146a565b50909695505050505050565b60008083601f8401126114ad57600080fd5b50813567ffffffffffffffff8111156114c557600080fd5b6020830191508360208260051b85010111156114e057600080fd5b9250929050565b60008083601f8401126114f957600080fd5b50813567ffffffffffffffff81111561151157600080fd5b6020830191508360208285010111156114e057600080fd5b60008060008060008060008060a0898b03121561154557600080fd5b61154e896113c3565b975061155c60208a016113c3565b9650604089013567ffffffffffffffff8082111561157957600080fd5b6115858c838d0161149b565b909850965060608b013591508082111561159e57600080fd5b6115aa8c838d0161149b565b909650945060808b01359150808211156115c357600080fd5b506115d08b828c016114e7565b999c989b5096995094979396929594505050565b60008060008060008060a087890312156115fd57600080fd5b611606876113c3565b9550611614602088016113c3565b94506040870135935060608701359250608087013567ffffffffffffffff81111561163e57600080fd5b61164a89828a016114e7565b979a9699509497509295939492505050565b60006020828403121561166e57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561169e5761169e611675565b92915050565b8181038181111561169e5761169e611675565b600181811c908216806116cb57607f821691505b6020821081036116eb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161171957611719611675565b5060010190565b60006020828403121561173257600080fd5b815180151581146112e857600080fd5b634e487b7160e01b600052604160045260246000fd5b60018060a01b038616815260006020868184015285604084015260a0606084015261178660a08401866113f5565b83810360808501528454600090600181811c90808316806117a857607f831692505b86831081036117c557634e487b7160e01b85526022600452602485fd5b8286526020860195508080156117e257600181146117f857611823565b60ff198516875283151560051b87019550611823565b60008b81526020902060005b8581101561181d57815489820152908401908901611804565b88019650505b50939d9c50505050505050505050505050565b60006020828403121561184857600080fd5b5051919050565b600060a0820160018060a01b038089168452602060a08186015282895480855260c0870191508a60005282600020945060005b818110156118a0578554851683526001958601959284019201611882565b505060408601899052858103606087015287518082529082019350915080870160005b838110156118df578151855293820193908201906001016118c3565b5050505082810360808401526118f581856113f5565b98975050505050505050565b808202811582820484141761169e5761169e611675565b60008261193557634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220bb1554d32c0885fb5b6ea4e234f0896bf376446ad859f83f92624604831a4b2964736f6c6343000814003360806040526000805460ff60a01b1916600160a01b1790553480156200002457600080fd5b50604051620024a5380380620024a58339810160408190526200004791620001c1565b6200005233620000d7565b600780546001600160a01b03808a166001600160a01b0319928316179092556008805489841690831617905560098054928816929091169190911790558151620000a490600590602085019062000127565b5060035550600680546001600160a01b0319166001600160a01b03939093169290921790915560025550620002eb915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000165579160200282015b828111156200016557825182559160200191906001019062000148565b506200017392915062000177565b5090565b5b8082111562000173576000815560010162000178565b80516001600160a01b0381168114620001a657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600060e0888a031215620001dd57600080fd5b620001e8886200018e565b96506020620001f9818a016200018e565b96506200020960408a016200018e565b95506200021960608a016200018e565b60808a015160a08b015191965094506001600160401b03808211156200023e57600080fd5b818b0191508b601f8301126200025357600080fd5b815181811115620002685762000268620001ab565b8060051b604051601f19603f83011681018181108582111715620002905762000290620001ab565b60405291825284820192508381018501918e831115620002af57600080fd5b938501935b82851015620002cf57845184529385019392850192620002b4565b80975050505050505060c0880151905092959891949750929550565b6121aa80620002fb6000396000f3fe6080604052600436106101bb5760003560e01c80638422a2f2116100ec578063bc61495b1161008a578063e141480d11610064578063e141480d1461057e578063e168afe314610593578063f2fde38b146105b3578063f3ad1535146105d357600080fd5b8063bc61495b1461051c578063c0840f561461053c578063c201c9f71461055e57600080fd5b806392ceecf1116100c657806392ceecf1146104b9578063943dfef1146104cf578063a77e0987146104e5578063aa209e7c1461050757600080fd5b80638422a2f21461043f57806384e08ab61461047b5780638da5cb5b1461049b57600080fd5b806329dcb0cf1161015957806367ecb10f1161013357806367ecb10f146103be5780636a5d498c146103f5578063715018a61461040a5780637ed2492a1461041f57600080fd5b806329dcb0cf1461036857806356885cd81461037e5780635ac9d2c41461039e57600080fd5b80631ef4d1fd116101955780631ef4d1fd146102d4578063214eafd4146102f4578063222743a21461031457806325b2564a1461034457600080fd5b806302d05d3f146102365780630cf9af03146102735780631b561cf9146102a457600080fd5b36610231576009546001600160a01b0316331461022f5760405162461bcd60e51b815260206004820152602760248201527f72656365697665723a204e6f74207468652063726f776466756e64696e6720636044820152661bdb9d1c9858dd60ca1b60648201526084015b60405180910390fd5b005b600080fd5b34801561024257600080fd5b50600654610256906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561027f57600080fd5b5060005461029490600160a01b900460ff1681565b604051901515815260200161026a565b3480156102b057600080fd5b506102946102bf366004611a87565b600f6020526000908152604090205460ff1681565b3480156102e057600080fd5b50600754610256906001600160a01b031681565b34801561030057600080fd5b5061022f61030f366004611b14565b6105f5565b34801561032057600080fd5b5061029461032f366004611a87565b60106020526000908152604090205460ff1681565b34801561035057600080fd5b5061035a60045481565b60405190815260200161026a565b34801561037457600080fd5b5061035a60025481565b34801561038a57600080fd5b50600954610256906001600160a01b031681565b3480156103aa57600080fd5b506102566103b9366004611bb1565b6106d0565b3480156103ca57600080fd5b506103de6103d9366004611bb1565b6106fa565b60408051921515835290151560208301520161026a565b34801561040157600080fd5b5061022f61072f565b34801561041657600080fd5b5061022f610862565b34801561042b57600080fd5b5061022f61043a366004611c47565b610876565b34801561044b57600080fd5b506103de61045a366004611a87565b600e6020526000908152604090206001015460ff8082169161010090041682565b34801561048757600080fd5b5061022f610496366004611ccc565b610fb2565b3480156104a757600080fd5b506000546001600160a01b0316610256565b3480156104c557600080fd5b5061035a60035481565b3480156104db57600080fd5b5061035a60015481565b3480156104f157600080fd5b506104fa61112a565b60405161026a9190611d85565b34801561051357600080fd5b5061022f6111b8565b34801561052857600080fd5b50600854610256906001600160a01b031681565b34801561054857600080fd5b5061055161139a565b60405161026a9190611df5565b34801561056a57600080fd5b5061035a610579366004611bb1565b6115c5565b34801561058a57600080fd5b506102946115e6565b34801561059f57600080fd5b506102566105ae366004611bb1565b611755565b3480156105bf57600080fd5b5061022f6105ce366004611a87565b611765565b3480156105df57600080fd5b506105e86117db565b60405161026a9190611e95565b6007546001600160a01b031633146106635760405162461bcd60e51b815260206004820152602b60248201527f73657453656c65637465644576616c7561746f72733a204e6f7420746865205660448201526a14918818dbdb9d1c9858dd60aa1b6064820152608401610226565b60005b8151811015610681578061067981611ef8565b915050610666565b50805161069590600a906020840190611903565b507ffd35f96279e550a2cd0fa660d841f96151fb8e2f8fdded9e10f8865219543306816040516106c59190611e95565b60405180910390a150565b600a81815481106106e057600080fd5b6000918252602090912001546001600160a01b0316905081565b600c818154811061070a57600080fd5b600091825260209091206001600390920201015460ff80821692506101009091041682565b60025442106107965760405162461bcd60e51b815260206004820152602d60248201527f6265636f6d654576616c7561746f723a207468652073656c656374696f6e207060448201526c32b934b7b21034b99037bb32b960991b6064820152608401610226565b336000908152600f602052604090205460ff16156108045760405162461bcd60e51b815260206004820152602560248201527f6265636f6d654576616c7561746f723a20416c726561647920616e206576616c6044820152643ab0ba37b960d91b6064820152608401610226565b336000818152600f60205260408120805460ff19166001908117909155600b805491820181559091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319169091179055565b61086a61183d565b6108746000611897565b565b600054600160a01b900460ff166108e75760405162461bcd60e51b815260206004820152602f60248201527f6576616c7561746545766964656e63653a20546865206576616c756174696f6e60448201526e103832b934b7b21034b99037bb32b960891b6064820152608401610226565b600254421180156108f9575060035442105b6109605760405162461bcd60e51b815260206004820152603260248201527f6576616c7561746545766964656e63653a205468652073656c656374696f6e206044820152713832b934b7b21034b9903737ba1037bb32b960711b6064820152608401610226565b83516003146109c05760405162461bcd60e51b815260206004820152602660248201527f6576616c7561746545766964656e63653a2054686520696d6167657320617265604482015265206e6f74203360d01b6064820152608401610226565b8051600314610a1f5760405162461bcd60e51b815260206004820152602560248201527f6576616c7561746545766964656e63653a20546865206c696e6b7320617265206044820152646e6f74203360d81b6064820152608401610226565b610acb60405180602001604052806000815250600d8054610a3f90611f11565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6b90611f11565b8015610ab85780601f10610a8d57610100808354040283529160200191610ab8565b820191906000526020600020905b815481529060010190602001808311610a9b57829003601f168201915b50505050506118e790919063ffffffff16565b15610b285760405162461bcd60e51b815260206004820152602760248201527f6576616c7561746545766964656e63653a205468652065766964656e636520696044820152667320656d70747960c81b6064820152608401610226565b336000908152600f602052604090205460ff16610b925760405162461bcd60e51b815260206004820152602260248201527f6576616c7561746545766964656e63653a204e6f7420616e206576616c75617460448201526137b960f11b6064820152608401610226565b3360009081526010602052604090205460ff1615610bfe5760405162461bcd60e51b815260206004820152602360248201527f6576616c7561746545766964656e63653a20416c7265616479206576616c75616044820152621d195960ea1b6064820152608401610226565b604080516080810182528581528415156020808301919091528415158284015260608201849052336000908152600e8252929092208151805192939192610c489284920190611968565b50602082810151600183018054604086015115156101000261ff00199315159390931661ffff199091161791909117905560608301518051610c909260028501920190611968565b5050336000908152601060209081526040808320805460ff19166001908117909155600e9092528220600c8054928301815590925281549192506003027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70190610cfd9082908490611a08565b5060018281018054918301805460ff938416151560ff19821681178355925461010090819004909416151590930261ff001990921661ffff199093169290921717905560028083018054610d549284019190611a08565b50506004805491506000610d6783611ef8565b9190505550600454600303610fac5760005b600a54811015610e90576000600a8281548110610d9857610d98611f45565b6000918252602090912001546001546001600160a01b0390911690610dbf90600390611f5b565b604051600081818185875af1925050503d8060008114610dfb576040519150601f19603f3d011682016040523d82523d6000602084013e610e00565b606091505b5050905080610e5b5760405162461bcd60e51b815260206004820152602160248201527f6576616c7561746545766964656e63653a205472616e73666572206661696c656044820152601960fa1b6064820152608401610226565b336001600160a01b0316600a8381548110610e7857610e78611f45565b50600052505080610e8881611ef8565b915050610d79565b50600080546001600160a01b03166006546040516001600160a01b0391821660248201526002604482015291169060640160408051601f198184030181529181526020820180516001600160e01b031663327c8aa160e11b17905251610ef69190611f7d565b6000604051808303816000865af19150503d8060008114610f33576040519150601f19603f3d011682016040523d82523d6000602084013e610f38565b606091505b5050905080610f9d5760405162461bcd60e51b815260206004820152602b60248201527f6576616c7561746545766964656e63653a205365742070726f6a65637420737460448201526a185d1d5cc819985a5b195960aa1b6064820152608401610226565b506000805460ff60a01b191690555b50505050565b6006546001600160a01b0316331461101b5760405162461bcd60e51b815260206004820152602660248201527f6f6e6c7943726561746f723a2063616c6c6572206973206e6f742074686520636044820152653932b0ba37b960d11b6064820152608401610226565b600560018154811061102f5761102f611f45565b90600052602060002001544210156110945760405162461bcd60e51b815260206004820152602260248201527f73657445766964656e63653a205468652070726f6a6563742068617320656e64604482015261195960f21b6064820152608401610226565b60035442106110fa5760405162461bcd60e51b815260206004820152602c60248201527f73657445766964656e63653a20546865206576616c756174696f6e207065726960448201526b1bd9081a185cc8195b99195960a21b6064820152608401610226565b60005b600a54811015611119578061111181611ef8565b9150506110fd565b50600d6111268282611fe8565b5050565b600d805461113790611f11565b80601f016020809104026020016040519081016040528092919081815260200182805461116390611f11565b80156111b05780601f10611185576101008083540402835291602001916111b0565b820191906000526020600020905b81548152906001019060200180831161119357829003601f168201915b505050505081565b600254421061121d5760405162461bcd60e51b815260206004820152602b60248201527f6c6566744576616c7561746f723a207468652073656c656374696f6e2070657260448201526a34b7b21034b99037bb32b960a91b6064820152608401610226565b336000908152600f602052604090205460ff1661127c5760405162461bcd60e51b815260206004820152601f60248201527f6c6566744576616c7561746f723a204e6f7420616e206576616c7561746f72006044820152606401610226565b336000908152600f60205260408120805460ff191690555b600b5481101561139757336001600160a01b0316600b82815481106112bb576112bb611f45565b6000918252602090912001546001600160a01b03160361138557600b80546112e5906001906120a8565b815481106112f5576112f5611f45565b600091825260209091200154600b80546001600160a01b03909216918390811061132157611321611f45565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600b805480611360576113606120bb565b600082815260209020810160001990810180546001600160a01b031916905501905550565b8061138f81611ef8565b915050611294565b50565b600b5460609060009067ffffffffffffffff8111156113bb576113bb611aa9565b60405190808252806020026020018201604052801561141b57816020015b611408604051806080016040528060608152602001600015158152602001600015158152602001606081525090565b8152602001906001900390816113d95790505b50600b5490915060000361142e57919050565b60005b600b548110156115bf57600e6000600b838154811061145257611452611f45565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208151815460a094810282018501909352608081018381529093919284928491908401828280156114e857602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116114b75790505b5050509183525050600182015460ff8082161515602080850191909152610100909204161515604080840191909152600284018054825181850281018501909352808352606090940193919290919083018282801561158657602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116115555790505b5050505050815250508282815181106115a1576115a1611f45565b602002602001018190525080806115b790611ef8565b915050611431565b50919050565b600581815481106115d557600080fd5b600091825260209091200154905081565b6009546000906001600160a01b0316331461165b5760405162461bcd60e51b815260206004820152602f60248201527f73656c6563744576616c7561746f72733a204e6f74207468652063726f77646660448201526e1d5b991a5b99c818dbdb9d1c9858dd608a1b6064820152608401610226565b600b54600310156116e757600754604051630a6fba9f60e31b81526001600160a01b039091169063537dd4f89061169c906003903090600b9060040161210f565b6020604051808303816000875af11580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df9190612148565b506001905090565b600b5460030361174f5760005b600a54811015611710578061170881611ef8565b9150506116f4565b507ffd35f96279e550a2cd0fa660d841f96151fb8e2f8fdded9e10f8865219543306600b6040516117419190612161565b60405180910390a150600190565b50600090565b600b81815481106106e057600080fd5b61176d61183d565b6001600160a01b0381166117d25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610226565b61139781611897565b6060600a80548060200260200160405190810160405280929190818152602001828054801561183357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611815575b5050505050905090565b6000546001600160a01b031633146108745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610226565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818051906020012083805190602001201490505b92915050565b828054828255906000526020600020908101928215611958579160200282015b8281111561195857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611923565b50611964929150611a56565b5090565b82805482825590600052602060002090601f016020900481019282156119585791602002820160005b838211156119ce57835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302611991565b80156119fb5782816101000a81549060ff02191690556001016020816000010492830192600103026119ce565b5050611964929150611a56565b82805482825590600052602060002090601f0160209004810192821561195857600052602060002091601f016020900482015b82811115611958578254825591600101919060010190611a3b565b5b808211156119645760008155600101611a57565b80356001600160a01b0381168114611a8257600080fd5b919050565b600060208284031215611a9957600080fd5b611aa282611a6b565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ae857611ae8611aa9565b604052919050565b600067ffffffffffffffff821115611b0a57611b0a611aa9565b5060051b60200190565b60006020808385031215611b2757600080fd5b823567ffffffffffffffff811115611b3e57600080fd5b8301601f81018513611b4f57600080fd5b8035611b62611b5d82611af0565b611abf565b81815260059190911b82018301908381019087831115611b8157600080fd5b928401925b82841015611ba657611b9784611a6b565b82529284019290840190611b86565b979650505050505050565b600060208284031215611bc357600080fd5b5035919050565b80358015158114611a8257600080fd5b600082601f830112611beb57600080fd5b81356020611bfb611b5d83611af0565b82815260059290921b84018101918181019086841115611c1a57600080fd5b8286015b84811015611c3c57611c2f81611bca565b8352918301918301611c1e565b509695505050505050565b60008060008060808587031215611c5d57600080fd5b843567ffffffffffffffff80821115611c7557600080fd5b611c8188838901611bda565b9550611c8f60208801611bca565b9450611c9d60408801611bca565b93506060870135915080821115611cb357600080fd5b50611cc087828801611bda565b91505092959194509250565b60006020808385031215611cdf57600080fd5b823567ffffffffffffffff80821115611cf757600080fd5b818501915085601f830112611d0b57600080fd5b813581811115611d1d57611d1d611aa9565b611d2f601f8201601f19168501611abf565b91508082528684828501011115611d4557600080fd5b8084840185840137600090820190930192909252509392505050565b60005b83811015611d7c578181015183820152602001611d64565b50506000910152565b6020815260008251806020840152611da4816040850160208701611d61565b601f01601f19169190910160400192915050565b600081518084526020808501945080840160005b83811015611dea578151151587529582019590820190600101611dcc565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611e8757603f19898403018552815160808151818652611e4282870182611db8565b915050888201511515898601528782015115158886015260608083015192508582038187015250611e738183611db8565b968901969450505090860190600101611e1c565b509098975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611ed65783516001600160a01b031683529284019291840191600101611eb1565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201611f0a57611f0a611ee2565b5060010190565b600181811c90821680611f2557607f821691505b6020821081036115bf57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600082611f7857634e487b7160e01b600052601260045260246000fd5b500490565b60008251611f8f818460208701611d61565b9190910192915050565b601f821115611fe357600081815260208120601f850160051c81016020861015611fc05750805b601f850160051c820191505b81811015611fdf57828155600101611fcc565b5050505b505050565b815167ffffffffffffffff81111561200257612002611aa9565b612016816120108454611f11565b84611f99565b602080601f83116001811461204b57600084156120335750858301515b600019600386901b1c1916600185901b178555611fdf565b600085815260208120601f198616915b8281101561207a5788860151825594840194600190910190840161205b565b50858210156120985787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103818111156118fd576118fd611ee2565b634e487b7160e01b600052603160045260246000fd5b6000815480845260208085019450836000528060002060005b83811015611dea5781546001600160a01b0316875295820195600191820191016120ea565b63ffffffff841681526001600160a01b038316602082015260606040820181905260009061213f908301846120d1565b95945050505050565b60006020828403121561215a57600080fd5b5051919050565b602081526000611aa260208301846120d156fea2646970667358221220882e83214e0047267c39f5dd5f8ac9f7a791d15ea107efc2444baa868543c79d64736f6c63430008140033a26469706673582212208dab2e22fe482c9335b69f3a05383b97f9f0979551802353cbfb96515f26473a64736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001095760003560e01c80637baab3da11620000a3578063c76aa072116200006e578063c76aa0721462000285578063c9043165146200029c578063f0f4426014620002a6578063f2fde38b14620002bd57600080fd5b80637baab3da146200020057806380d0382914620002325780638da5cb5b146200024b578063bc61495b146200025d57600080fd5b80635c321ea811620000e45780635c321ea814620001a157806361d027b314620001c957806364f9154214620001dd578063715018a614620001f657600080fd5b80631ef4d1fd146200010e578063365b98b214620001535780634209fff1146200016a575b600080fd5b620001367f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6200013662000164366004620014f6565b620002d4565b620001906200017b36600462001526565b60036020526000908152604090205460ff1681565b60405190151581526020016200014a565b620001367f000000000000000000000000000000000000000000000000000000000000000081565b60015462000136906001600160a01b031681565b620001f4620001ee3660046200154d565b620002ff565b005b620001f46200043d565b620002236200021136600462001526565b60046020526000908152604090205481565b6040519081526020016200014a565b6200023c62000455565b6040516200014a91906200160f565b6000546001600160a01b031662000136565b620001367f000000000000000000000000000000000000000000000000000000000000000081565b620001f462000296366004620017e1565b620007ee565b620001f462001025565b62000136620002b736600462001526565b620012c3565b620001f4620002ce36600462001526565b620012f2565b60028181548110620002e557600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038216600090815260046020526040812090805b6001830154811015620003d7576000836001018281548110620003415762000341620018d6565b60009182526020909120600560079092020101546001600160a01b03169050338103620003c15784846001018381548110620003815762000381620018d6565b60009182526020909120600460079092020101805460ff19166001836002811115620003b157620003b1620015d6565b02179055506001925050620003d7565b5080620003ce8162001902565b9150506200031a565b5080620004375760405162461bcd60e51b815260206004820152602360248201527f73657450726f6a6563745374617475733a2050726f6a656374206e6f7420666f6044820152621d5b9960ea1b60648201526084015b60405180910390fd5b50505050565b620004476200136e565b620004536000620013ca565b565b60606000805b600254811015620004cb576004600060028381548110620004805762000480620018d6565b60009182526020808320909101546001600160a01b03168352820192909252604001902060010154620004b490836200191e565b915080620004c28162001902565b9150506200045b565b5060008167ffffffffffffffff811115620004ea57620004ea62001720565b6040519080825280602002602001820160405280156200052757816020015b620005136200141a565b815260200190600190039081620005095790505b506002549091506000036200053c5792915050565b6000805b600254811015620007e55760006004600060028481548110620005675762000567620018d6565b60009182526020808320909101546001600160a01b031683528281019390935260409182018120600101805483518186028101860190945280845292939092919084015b82821015620007575783829060005260206000209060070201604051806101000160405290816000820154815260200160018201548152602001600282018054806020026020016040519081016040528092919081815260200182805480156200063557602002820191906000526020600020905b81548152602001906001019080831162000620575b5050505050815260200160038201805462000650906200193a565b80601f01602080910402602001604051908101604052809291908181526020018280546200067e906200193a565b8015620006cf5780601f10620006a357610100808354040283529160200191620006cf565b820191906000526020600020905b815481529060010190602001808311620006b157829003601f168201915b5050509183525050600482015460209091019060ff166002811115620006f957620006f9620015d6565b60028111156200070d576200070d620015d6565b815260048201546001600160a01b036101009091048116602080840191909152600584015482166040840152600690930154166060909101529082526001929092019101620005ab565b50505050905060005b8151811015620007cd578181815181106200077f576200077f620018d6565b60200260200101518585815181106200079c576200079c620018d6565b60200260200101819052508380620007b49062001902565b9450508080620007c49062001902565b91505062000760565b50508080620007dc9062001902565b91505062000540565b50909392505050565b60008511620008555760405162461bcd60e51b815260206004820152602c60248201527f63726561746550726f6a6563743a20416d6f756e74206d75737420626520677260448201526b06561746572207468616e20360a41b60648201526084016200042e565b428411620008cc5760405162461bcd60e51b815260206004820152603960248201527f63726561746550726f6a6563743a20446561646c696e65206d7573742062652060448201527f67726561746572207468616e2063757272656e742074696d650000000000000060648201526084016200042e565b8251600214620009385760405162461bcd60e51b815260206004820152603060248201527f63726561746550726f6a6563743a2050726f6a6563742074696d65206d75737460448201526f2068617665203220656c656d656e747360801b60648201526084016200042e565b826000815181106200094e576200094e620018d6565b6020026020010151841115620009db5760405162461bcd60e51b815260206004820152604560248201527f63726561746550726f6a6563743a20446561646c696e65206d7573742062652060448201527f6c657373206f7220657175616c207468616e2070726f6a6563742073746172746064820152642074696d6560d81b608482015260a4016200042e565b82600181518110620009f157620009f1620018d6565b6020026020010151836000600181111562000a105762000a10620015d6565b8151811062000a235762000a23620018d6565b60200260200101511062000aae5760405162461bcd60e51b8152602060048201526044602482018190527f63726561746550726f6a6563743a2050726f6a6563742073746172742074696d908201527f65206d757374206265206c657373207468616e2070726f6a65637420656e642060648201526374696d6560e01b608482015260a4016200042e565b336000908152600460205260409020548062000aca8162001902565b3360009081526004602052604081208290559092509050606462000af088600562001976565b62000afc919062001990565b90506000606462000b0f83600a62001976565b62000b1b919062001990565b9050600085905060008984848b33600160009054906101000a90046001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008d60405162000b909062001473565b62000ba499989796959493929190620019b3565b604051809103906000f08015801562000bc1573d6000803e3d6000fd5b50905060007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083338d8d8860405162000c1b9062001481565b62000c2d979695949392919062001a5b565b604051809103906000f08015801562000c4a573d6000803e3d6000fd5b50604051632fba153f60e11b81526001600160a01b038083166004830152600160248301529192507f000000000000000000000000000000000000000000000000000000000000000090911690635f742a7e90604401600060405180830381600087803b15801562000cbb57600080fd5b505af115801562000cd0573d6000803e3d6000fd5b5050604051630f5f3c2b60e31b81526001600160a01b03848116600483015285169250637af9e15891506024016020604051808303816000875af115801562000d1d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d43919062001ab4565b5060405163f2fde38b60e01b81523060048201526001600160a01b0383169063f2fde38b90602401600060405180830381600087803b15801562000d8657600080fd5b505af115801562000d9b573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523060048201526001600160a01b038416925063f2fde38b9150602401600060405180830381600087803b15801562000de157600080fd5b505af115801562000df6573d6000803e3d6000fd5b5050505060006040518061010001604052808881526020018d81526020018b81526020018981526020016000600281111562000e365762000e36620015d6565b81526001600160a01b038086166020808401919091529085166040808401919091523360609093018390526000928352600390915290205490915060ff1662000ed657336000818152600360205260408120805460ff191660019081179091556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b03191690911790555b3360009081526004602090815260408083206001908101805480830182559085529383902085516007909502019384558483015190840155830151805184939262000f299260028501929101906200148f565b506060820151600382019062000f40908262001b27565b50608082015160048201805460ff1916600183600281111562000f675762000f67620015d6565b021790555060a08201516004820180546001600160a01b0392831661010002610100600160a81b031990911617905560c08301516005830180549183166001600160a01b031992831617905560e090930151600690920180549282169290931691909117909155828116908416887fb547b8943914ca765ec0f833455114c104183e93d66a2cb9ea9f8372f15e32eb8f8e8d6000336040516200100f95949392919062001bf4565b60405180910390a4505050505050505050505050565b60005b600254811015620012c0576000600282815481106200104b576200104b620018d6565b60009182526020808320909101546001600160a01b0316808352600490915260408220909250905b6001820154811015620012a75760008260010182815481106200109a576200109a620018d6565b6000918252602082206007909102019150600482015460ff166002811115620010c757620010c7620015d6565b03620012915760008160040160019054906101000a90046001600160a01b03169050806001600160a01b03166329dcb0cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001128573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200114e919062001c46565b42118015620012245750806001600160a01b03166342cde4e86040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001197573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011bd919062001c46565b816001600160a01b03166312065fe06040518163ffffffff1660e01b8152600401602060405180830381865afa158015620011fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001222919062001c46565b105b156200128f57806001600160a01b03166338e771ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200126657600080fd5b505af11580156200127b573d6000803e3d6000fd5b5050505060048201805460ff191660011790555b505b50806200129e8162001902565b91505062001073565b5050508080620012b79062001902565b91505062001028565b50565b6000620012cf6200136e565b50600180546001600160a01b0319166001600160a01b0392909216918217905590565b620012fc6200136e565b6001600160a01b038116620013635760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200042e565b620012c081620013ca565b6000546001600160a01b03163314620004535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200042e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518061010001604052806000815260200160008152602001606081526020016060815260200160006002811115620014585762001458620015d6565b81526000602082018190526040820181905260609091015290565b611e778062001c6183390190565b6124a58062003ad883390190565b828054828255906000526020600020908101928215620014cd579160200282015b82811115620014cd578251825591602001919060010190620014b0565b50620014db929150620014df565b5090565b5b80821115620014db5760008155600101620014e0565b6000602082840312156200150957600080fd5b5035919050565b6001600160a01b0381168114620012c057600080fd5b6000602082840312156200153957600080fd5b8135620015468162001510565b9392505050565b600080604083850312156200156157600080fd5b82356200156e8162001510565b91506020830135600381106200158357600080fd5b809150509250929050565b6000815180845260005b81811015620015b65760208185018101518683018201520162001598565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b600381106200160b57634e487b7160e01b600052602160045260246000fd5b9052565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156200171157898403603f1901865282518051855288810151898601528781015161010089870181905281519087018190526101208701918b019085905b808210156200169a5782518452928c0192918c01916001919091019062001678565b50505060608083015187830382890152620016b683826200158e565b92505050608080830151620016ce82890182620015ec565b505060a0828101516001600160a01b039081169188019190915260c08084015182169088015260e092830151169190950152948701949187019160010162001637565b50919998505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562001762576200176262001720565b604052919050565b600082601f8301126200177c57600080fd5b813567ffffffffffffffff81111562001799576200179962001720565b620017ae601f8201601f191660200162001736565b818152846020838601011115620017c457600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215620017fa57600080fd5b853594506020808701359450604087013567ffffffffffffffff808211156200182257600080fd5b818901915089601f8301126200183757600080fd5b8135818111156200184c576200184c62001720565b8060051b6200185d85820162001736565b918252838101850191858101908d8411156200187857600080fd5b948601945b8386101562001898578535825294860194908601906200187d565b9850505050606089013594506080890135925080831115620018b957600080fd5b5050620018c9888289016200176a565b9150509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620019175762001917620018ec565b5060010190565b80820180821115620019345762001934620018ec565b92915050565b600181811c908216806200194f57607f821691505b6020821081036200197057634e487b7160e01b600052602260045260246000fd5b50919050565b8082028115828204841417620019345762001934620018ec565b600082620019ae57634e487b7160e01b600052601260045260246000fd5b500490565b8981526020810189905260408101889052606081018790526001600160a01b03868116608083015285811660a083015284811660c0830152831660e0820152610120610100820181905260009062001a0e838201856200158e565b9c9b505050505050505050505050565b600081518084526020808501945080840160005b8381101562001a505781518752958201959082019060010162001a32565b509495945050505050565b6001600160a01b03888116825287811660208301528681166040830152851660608201526080810184905260e060a0820181905260009062001aa09083018562001a1e565b90508260c083015298975050505050505050565b60006020828403121562001ac757600080fd5b8151620015468162001510565b601f82111562001b2257600081815260208120601f850160051c8101602086101562001afd5750805b601f850160051c820191505b8181101562001b1e5782815560010162001b09565b5050505b505050565b815167ffffffffffffffff81111562001b445762001b4462001720565b62001b5c8162001b5584546200193a565b8462001ad4565b602080601f83116001811462001b94576000841562001b7b5750858301515b600019600386901b1c1916600185901b17855562001b1e565b600085815260208120601f198616915b8281101562001bc55788860151825594840194600190910190840162001ba4565b508582101562001be45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b85815260a06020820152600062001c0f60a083018762001a1e565b828103604084015262001c2381876200158e565b606084019590955250506001600160a01b03919091166080909101529392505050565b60006020828403121562001c5957600080fd5b505191905056fe60806040526000805461ffff60a01b1916600160a01b1790553480156200002557600080fd5b5060405162001e7738038062001e77833981016040819052620000489162000251565b6200005333620001ce565b60008911620000cf5760405162461bcd60e51b815260206004820152603660248201527f636f6e7374727563746f7243726f776466756e64696e673a20616d6f756e742060448201527f6d7573742062652067726561746572207468616e20300000000000000000000060648201526084015b60405180910390fd5b428611620001525760405162461bcd60e51b815260206004820152604360248201527f636f6e7374727563746f7243726f776466756e64696e673a20646561646c696e60448201527f65206d7573742062652067726561746572207468616e2063757272656e742074606482015262696d6560e81b608482015260a401620000c6565b6002899055600388905560048790556001869055600980546001600160a01b038088166001600160a01b031992831617909255600a8054878416908316179055600680548684169083161790556008805492851692909116919091179055600c620001be82826200042b565b50505050505050505050620004f7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200023657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060008060006101208a8c0312156200027157600080fd5b8951985060208a0151975060408a0151965060608a015195506200029860808b016200021e565b9450620002a860a08b016200021e565b9350620002b860c08b016200021e565b9250620002c860e08b016200021e565b6101008b01519092506001600160401b0380821115620002e757600080fd5b818c0191508c601f830112620002fc57600080fd5b8151818111156200031157620003116200023b565b604051601f8201601f19908116603f011681019083821181831017156200033c576200033c6200023b565b816040528281528f60208487010111156200035657600080fd5b600093505b828410156200037e5760208486010151602085830101526020840193506200035b565b60006020848301015280955050505050509295985092959850929598565b600181811c90821680620003b157607f821691505b602082108103620003d257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200042657600081815260208120601f850160051c81016020861015620004015750805b601f850160051c820191505b8181101562000422578281556001016200040d565b5050505b505050565b81516001600160401b038111156200044757620004476200023b565b6200045f816200045884546200039c565b84620003d8565b602080601f8311600181146200049757600084156200047e5750858301515b600019600386901b1c1916600185901b17855562000422565b600085815260208120601f198616915b82811015620004c857888601518255948401946001909101908401620004a7565b5085821015620004e75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61197080620005076000396000f3fe6080604052600436106101d15760003560e01c80636b1a91ee116100f7578063bc197c8111610095578063ddca3f4311610064578063ddca3f431461054b578063f23a6e6114610561578063f2fde38b146105a7578063fd5e6dd1146105c757600080fd5b8063bc197c8114610495578063bc61495b146104f6578063bfb29f3714610516578063c5f956af1461052b57600080fd5b80638da5cb5b116100d15780638da5cb5b1461042a578063943dfef1146104485780639876a6431461045e57806398bdf6f51461047f57600080fd5b80636b1a91ee146103d4578063715018a6146103f55780637af9e1581461040a57600080fd5b80632af5c9191161016f57806342cde4e81161013e57806342cde4e81461036757806343352d611461037d5780635c321ea81461039f57806361461954146103bf57600080fd5b80632af5c91914610308578063370158ea1461032857806338e771ab1461034a5780633a4b66f11461035f57600080fd5b80631300a6d1116101ab5780631300a6d1146102805780631d0d35f51461029557806327e235e3146102c557806329dcb0cf146102f257600080fd5b806301ffc9a7146101e557806302d05d3f1461022b57806312065fe01461026357600080fd5b366101e0576101de6105e7565b005b600080fd5b3480156101f157600080fd5b50610216610200366004611399565b6001600160e01b031916630271189760e51b1490565b60405190151581526020015b60405180910390f35b34801561023757600080fd5b5060095461024b906001600160a01b031681565b6040516001600160a01b039091168152602001610222565b34801561026f57600080fd5b50475b604051908152602001610222565b34801561028c57600080fd5b50610272610895565b3480156102a157600080fd5b506102166102b03660046113da565b600e6020526000908152604090205460ff1681565b3480156102d157600080fd5b506102726102e03660046113da565b600d6020526000908152604090205481565b3480156102fe57600080fd5b5061027260015481565b34801561031457600080fd5b5060075461024b906001600160a01b031681565b34801561033457600080fd5b5061033d6108ba565b604051610222919061143b565b34801561035657600080fd5b506101de610948565b6101de6105e7565b34801561037357600080fd5b5061027260025481565b34801561038957600080fd5b50610392610af7565b604051610222919061144e565b3480156103ab57600080fd5b5060065461024b906001600160a01b031681565b3480156103cb57600080fd5b506101de610b59565b3480156103e057600080fd5b5060005461021690600160a01b900460ff1681565b34801561040157600080fd5b506101de6111c4565b34801561041657600080fd5b5061024b6104253660046113da565b6111d8565b34801561043657600080fd5b506000546001600160a01b031661024b565b34801561045457600080fd5b5061027260035481565b34801561046a57600080fd5b5060005461021690600160a81b900460ff1681565b34801561048b57600080fd5b5061027260055481565b3480156104a157600080fd5b506104dd6104b0366004611529565b7fbc197c819b3e337a6f9652dd10becd7eef83032af3b9d958d3d42f669414662198975050505050505050565b6040516001600160e01b03199091168152602001610222565b34801561050257600080fd5b5060085461024b906001600160a01b031681565b34801561052257600080fd5b50610272611207565b34801561053757600080fd5b50600a5461024b906001600160a01b031681565b34801561055757600080fd5b5061027260045481565b34801561056d57600080fd5b506104dd61057c3660046115e4565b7ff23a6e612e1ff4830e658fe43f4e3cb4a5f8170bd5d9e69fb5d7a7fa9e4fdf979695505050505050565b3480156105b357600080fd5b506101de6105c23660046113da565b611217565b3480156105d357600080fd5b5061024b6105e236600461165c565b61128d565b6009546001600160a01b031633036106465760405162461bcd60e51b815260206004820152601f60248201527f7374616b653a207468652063726561746f722063616e6e6f74207374616b650060448201526064015b60405180910390fd5b600054600160a01b900460ff1661069f5760405162461bcd60e51b815260206004820152601b60248201527f7374616b653a20746865207374616b657220697320636c6f7365640000000000604482015260640161063d565b60015442106106f05760405162461bcd60e51b815260206004820152601d60248201527f7374616b653a20746865207374616b652074696d65206973206f766572000000604482015260640161063d565b600034116107535760405162461bcd60e51b815260206004820152602a60248201527f7374616b653a207374616b6520616d6f756e74206d75737420626520677265616044820152690746572207468616e20360b41b606482015260840161063d565b6002544711156107a55760405162461bcd60e51b815260206004820152601d60248201527f7374616b653a20657863656564656420746865207468726573686f6c64000000604482015260640161063d565b60025447036107c3576000805461ffff60a01b1916600160a81b1790555b336000908152600e602052604090205460ff1661083757336000818152600e60205260408120805460ff19166001908117909155600b805491820181559091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b03191690911790555b336000908152600d60205260408120805434929061085690849061168b565b9091555050604080513381523460208201527febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a910160405180910390a1565b60006001544210156108b457426001546108af91906116a4565b905090565b50600090565b600c80546108c7906116b7565b80601f01602080910402602001604051908101604052809291908181526020018280546108f3906116b7565b80156109405780601f1061091557610100808354040283529160200191610940565b820191906000526020600020905b81548152906001019060200180831161092357829003601f168201915b505050505081565b60025447106109a45760405162461bcd60e51b815260206004820152602260248201527f43726f776466756e64696e673a204e6f20726566756e647320617661696c61626044820152616c6560f01b606482015260840161063d565b60005b600b54811015610af4576000600b82815481106109c6576109c66116f1565b60009182526020808320909101546001600160a01b0316808352600d9091526040909120549091508015610adf576001600160a01b0382166000818152600d60205260408082208290555190919083908381818185875af1925050503d8060008114610a4e576040519150601f19603f3d011682016040523d82523d6000602084013e610a53565b606091505b5050905080610a9b5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b604482015260640161063d565b604080516001600160a01b0385168152602081018490527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364910160405180910390a1505b50508080610aec90611707565b9150506109a7565b50565b6060600b805480602002602001604051908101604052809291908181526020018280548015610b4f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b31575b5050505050905090565b6009546001600160a01b03163314610bc25760405162461bcd60e51b815260206004820152602660248201527f6f6e6c7943726561746f723a2063616c6c6572206973206e6f742074686520636044820152653932b0ba37b960d11b606482015260840161063d565b600054600160a81b900460ff16610c1b5760405162461bcd60e51b815260206004820152601f60248201527f657865637574653a2074686520776974686472617720697320636c6f73656400604482015260640161063d565b600154421015610c795760405162461bcd60e51b8152602060048201526024808201527f657865637574653a2074686520646561646c696e6520686173206e6f742070616044820152631cdcd95960e21b606482015260840161063d565b6002544714610cda5760405162461bcd60e51b815260206004820152602760248201527f657865637574653a20746865207468726573686f6c6420686173206e6f74206260448201526619595b881b595d60ca1b606482015260840161063d565b6007546040805163e141480d60e01b815290516000926001600160a01b03169163e141480d916004808301926020929190829003018187875af1158015610d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d499190611720565b905080610da45760405162461bcd60e51b8152602060048201526024808201527f657865637574653a206661696c656420746f2073656c656374206576616c7561604482015263746f727360e01b606482015260840161063d565b600b5460009067ffffffffffffffff811115610dc257610dc2611742565b604051908082528060200260200182016040528015610deb578160200160208202803683370190505b50905060005b600b54811015610e65576000600b8281548110610e1057610e106116f1565b60009182526020822001546001600160a01b03169150610e2f826112b7565b905080848481518110610e4457610e446116f1565b60200260200101818152505050508080610e5d90611707565b915050610df1565b50600654600554604080516000808252602082019283905263c1341c4f60e01b90925290926001600160a01b03169163c1341c4f91610eae913091606490600c60248201611758565b6020604051808303816000875af1158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef19190611836565b600580549192506000610f0383611707565b90915550506006546040805160008152602081019182905263864c1cd960e01b9091526001600160a01b039091169063864c1cd990610f4e903090600b90869088906024810161184f565b600060405180830381600087803b158015610f6857600080fd5b505af1158015610f7c573d6000803e3d6000fd5b5050600a54600454604051600094506001600160a01b039092169250908381818185875af1925050503d8060008114610fd1576040519150601f19603f3d011682016040523d82523d6000602084013e610fd6565b606091505b50509050806110395760405162461bcd60e51b815260206004820152602960248201527f657865637574653a206661696c656420746f2073656e6420657468657220746f60448201526820747265617375727960b81b606482015260840161063d565b600060045460035461104b91906116a4565b6007546040519192506000916001600160a01b039091169083908381818185875af1925050503d806000811461109d576040519150601f19603f3d011682016040523d82523d6000602084013e6110a2565b606091505b50509050806111075760405162461bcd60e51b815260206004820152602b60248201527f657865637574653a206661696c656420746f2073656e6420657468657220746f60448201526a1032bb30b63ab0ba34b7b760a91b606482015260840161063d565b604051600090339047908381818185875af1925050503d8060008114611149576040519150601f19603f3d011682016040523d82523d6000602084013e61114e565b606091505b50509050806111ae5760405162461bcd60e51b815260206004820152602660248201527f657865637574653a206661696c656420746f2073656e6420657468657220746f6044820152651037bbb732b960d11b606482015260840161063d565b50506000805460ff60a81b191690555050505050565b6111cc6112ef565b6111d66000611349565b565b60006111e26112ef565b50600780546001600160a01b0319166001600160a01b0383169081179091555b919050565b6000476002546108af91906116a4565b61121f6112ef565b6001600160a01b0381166112845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161063d565b610af481611349565b600b818154811061129d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0381166000908152600d60205260408120546002546112de826064611901565b6112e89190611918565b9392505050565b6000546001600160a01b031633146111d65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156113ab57600080fd5b81356001600160e01b0319811681146112e857600080fd5b80356001600160a01b038116811461120257600080fd5b6000602082840312156113ec57600080fd5b6112e8826113c3565b6000815180845260005b8181101561141b576020818501810151868301820152016113ff565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006112e860208301846113f5565b6020808252825182820181905260009190848201906040850190845b8181101561148f5783516001600160a01b03168352928401929184019160010161146a565b50909695505050505050565b60008083601f8401126114ad57600080fd5b50813567ffffffffffffffff8111156114c557600080fd5b6020830191508360208260051b85010111156114e057600080fd5b9250929050565b60008083601f8401126114f957600080fd5b50813567ffffffffffffffff81111561151157600080fd5b6020830191508360208285010111156114e057600080fd5b60008060008060008060008060a0898b03121561154557600080fd5b61154e896113c3565b975061155c60208a016113c3565b9650604089013567ffffffffffffffff8082111561157957600080fd5b6115858c838d0161149b565b909850965060608b013591508082111561159e57600080fd5b6115aa8c838d0161149b565b909650945060808b01359150808211156115c357600080fd5b506115d08b828c016114e7565b999c989b5096995094979396929594505050565b60008060008060008060a087890312156115fd57600080fd5b611606876113c3565b9550611614602088016113c3565b94506040870135935060608701359250608087013567ffffffffffffffff81111561163e57600080fd5b61164a89828a016114e7565b979a9699509497509295939492505050565b60006020828403121561166e57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561169e5761169e611675565b92915050565b8181038181111561169e5761169e611675565b600181811c908216806116cb57607f821691505b6020821081036116eb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161171957611719611675565b5060010190565b60006020828403121561173257600080fd5b815180151581146112e857600080fd5b634e487b7160e01b600052604160045260246000fd5b60018060a01b038616815260006020868184015285604084015260a0606084015261178660a08401866113f5565b83810360808501528454600090600181811c90808316806117a857607f831692505b86831081036117c557634e487b7160e01b85526022600452602485fd5b8286526020860195508080156117e257600181146117f857611823565b60ff198516875283151560051b87019550611823565b60008b81526020902060005b8581101561181d57815489820152908401908901611804565b88019650505b50939d9c50505050505050505050505050565b60006020828403121561184857600080fd5b5051919050565b600060a0820160018060a01b038089168452602060a08186015282895480855260c0870191508a60005282600020945060005b818110156118a0578554851683526001958601959284019201611882565b505060408601899052858103606087015287518082529082019350915080870160005b838110156118df578151855293820193908201906001016118c3565b5050505082810360808401526118f581856113f5565b98975050505050505050565b808202811582820484141761169e5761169e611675565b60008261193557634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220bb1554d32c0885fb5b6ea4e234f0896bf376446ad859f83f92624604831a4b2964736f6c6343000814003360806040526000805460ff60a01b1916600160a01b1790553480156200002457600080fd5b50604051620024a5380380620024a58339810160408190526200004791620001c1565b6200005233620000d7565b600780546001600160a01b03808a166001600160a01b0319928316179092556008805489841690831617905560098054928816929091169190911790558151620000a490600590602085019062000127565b5060035550600680546001600160a01b0319166001600160a01b03939093169290921790915560025550620002eb915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000165579160200282015b828111156200016557825182559160200191906001019062000148565b506200017392915062000177565b5090565b5b8082111562000173576000815560010162000178565b80516001600160a01b0381168114620001a657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600060e0888a031215620001dd57600080fd5b620001e8886200018e565b96506020620001f9818a016200018e565b96506200020960408a016200018e565b95506200021960608a016200018e565b60808a015160a08b015191965094506001600160401b03808211156200023e57600080fd5b818b0191508b601f8301126200025357600080fd5b815181811115620002685762000268620001ab565b8060051b604051601f19603f83011681018181108582111715620002905762000290620001ab565b60405291825284820192508381018501918e831115620002af57600080fd5b938501935b82851015620002cf57845184529385019392850192620002b4565b80975050505050505060c0880151905092959891949750929550565b6121aa80620002fb6000396000f3fe6080604052600436106101bb5760003560e01c80638422a2f2116100ec578063bc61495b1161008a578063e141480d11610064578063e141480d1461057e578063e168afe314610593578063f2fde38b146105b3578063f3ad1535146105d357600080fd5b8063bc61495b1461051c578063c0840f561461053c578063c201c9f71461055e57600080fd5b806392ceecf1116100c657806392ceecf1146104b9578063943dfef1146104cf578063a77e0987146104e5578063aa209e7c1461050757600080fd5b80638422a2f21461043f57806384e08ab61461047b5780638da5cb5b1461049b57600080fd5b806329dcb0cf1161015957806367ecb10f1161013357806367ecb10f146103be5780636a5d498c146103f5578063715018a61461040a5780637ed2492a1461041f57600080fd5b806329dcb0cf1461036857806356885cd81461037e5780635ac9d2c41461039e57600080fd5b80631ef4d1fd116101955780631ef4d1fd146102d4578063214eafd4146102f4578063222743a21461031457806325b2564a1461034457600080fd5b806302d05d3f146102365780630cf9af03146102735780631b561cf9146102a457600080fd5b36610231576009546001600160a01b0316331461022f5760405162461bcd60e51b815260206004820152602760248201527f72656365697665723a204e6f74207468652063726f776466756e64696e6720636044820152661bdb9d1c9858dd60ca1b60648201526084015b60405180910390fd5b005b600080fd5b34801561024257600080fd5b50600654610256906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561027f57600080fd5b5060005461029490600160a01b900460ff1681565b604051901515815260200161026a565b3480156102b057600080fd5b506102946102bf366004611a87565b600f6020526000908152604090205460ff1681565b3480156102e057600080fd5b50600754610256906001600160a01b031681565b34801561030057600080fd5b5061022f61030f366004611b14565b6105f5565b34801561032057600080fd5b5061029461032f366004611a87565b60106020526000908152604090205460ff1681565b34801561035057600080fd5b5061035a60045481565b60405190815260200161026a565b34801561037457600080fd5b5061035a60025481565b34801561038a57600080fd5b50600954610256906001600160a01b031681565b3480156103aa57600080fd5b506102566103b9366004611bb1565b6106d0565b3480156103ca57600080fd5b506103de6103d9366004611bb1565b6106fa565b60408051921515835290151560208301520161026a565b34801561040157600080fd5b5061022f61072f565b34801561041657600080fd5b5061022f610862565b34801561042b57600080fd5b5061022f61043a366004611c47565b610876565b34801561044b57600080fd5b506103de61045a366004611a87565b600e6020526000908152604090206001015460ff8082169161010090041682565b34801561048757600080fd5b5061022f610496366004611ccc565b610fb2565b3480156104a757600080fd5b506000546001600160a01b0316610256565b3480156104c557600080fd5b5061035a60035481565b3480156104db57600080fd5b5061035a60015481565b3480156104f157600080fd5b506104fa61112a565b60405161026a9190611d85565b34801561051357600080fd5b5061022f6111b8565b34801561052857600080fd5b50600854610256906001600160a01b031681565b34801561054857600080fd5b5061055161139a565b60405161026a9190611df5565b34801561056a57600080fd5b5061035a610579366004611bb1565b6115c5565b34801561058a57600080fd5b506102946115e6565b34801561059f57600080fd5b506102566105ae366004611bb1565b611755565b3480156105bf57600080fd5b5061022f6105ce366004611a87565b611765565b3480156105df57600080fd5b506105e86117db565b60405161026a9190611e95565b6007546001600160a01b031633146106635760405162461bcd60e51b815260206004820152602b60248201527f73657453656c65637465644576616c7561746f72733a204e6f7420746865205660448201526a14918818dbdb9d1c9858dd60aa1b6064820152608401610226565b60005b8151811015610681578061067981611ef8565b915050610666565b50805161069590600a906020840190611903565b507ffd35f96279e550a2cd0fa660d841f96151fb8e2f8fdded9e10f8865219543306816040516106c59190611e95565b60405180910390a150565b600a81815481106106e057600080fd5b6000918252602090912001546001600160a01b0316905081565b600c818154811061070a57600080fd5b600091825260209091206001600390920201015460ff80821692506101009091041682565b60025442106107965760405162461bcd60e51b815260206004820152602d60248201527f6265636f6d654576616c7561746f723a207468652073656c656374696f6e207060448201526c32b934b7b21034b99037bb32b960991b6064820152608401610226565b336000908152600f602052604090205460ff16156108045760405162461bcd60e51b815260206004820152602560248201527f6265636f6d654576616c7561746f723a20416c726561647920616e206576616c6044820152643ab0ba37b960d91b6064820152608401610226565b336000818152600f60205260408120805460ff19166001908117909155600b805491820181559091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319169091179055565b61086a61183d565b6108746000611897565b565b600054600160a01b900460ff166108e75760405162461bcd60e51b815260206004820152602f60248201527f6576616c7561746545766964656e63653a20546865206576616c756174696f6e60448201526e103832b934b7b21034b99037bb32b960891b6064820152608401610226565b600254421180156108f9575060035442105b6109605760405162461bcd60e51b815260206004820152603260248201527f6576616c7561746545766964656e63653a205468652073656c656374696f6e206044820152713832b934b7b21034b9903737ba1037bb32b960711b6064820152608401610226565b83516003146109c05760405162461bcd60e51b815260206004820152602660248201527f6576616c7561746545766964656e63653a2054686520696d6167657320617265604482015265206e6f74203360d01b6064820152608401610226565b8051600314610a1f5760405162461bcd60e51b815260206004820152602560248201527f6576616c7561746545766964656e63653a20546865206c696e6b7320617265206044820152646e6f74203360d81b6064820152608401610226565b610acb60405180602001604052806000815250600d8054610a3f90611f11565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6b90611f11565b8015610ab85780601f10610a8d57610100808354040283529160200191610ab8565b820191906000526020600020905b815481529060010190602001808311610a9b57829003601f168201915b50505050506118e790919063ffffffff16565b15610b285760405162461bcd60e51b815260206004820152602760248201527f6576616c7561746545766964656e63653a205468652065766964656e636520696044820152667320656d70747960c81b6064820152608401610226565b336000908152600f602052604090205460ff16610b925760405162461bcd60e51b815260206004820152602260248201527f6576616c7561746545766964656e63653a204e6f7420616e206576616c75617460448201526137b960f11b6064820152608401610226565b3360009081526010602052604090205460ff1615610bfe5760405162461bcd60e51b815260206004820152602360248201527f6576616c7561746545766964656e63653a20416c7265616479206576616c75616044820152621d195960ea1b6064820152608401610226565b604080516080810182528581528415156020808301919091528415158284015260608201849052336000908152600e8252929092208151805192939192610c489284920190611968565b50602082810151600183018054604086015115156101000261ff00199315159390931661ffff199091161791909117905560608301518051610c909260028501920190611968565b5050336000908152601060209081526040808320805460ff19166001908117909155600e9092528220600c8054928301815590925281549192506003027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70190610cfd9082908490611a08565b5060018281018054918301805460ff938416151560ff19821681178355925461010090819004909416151590930261ff001990921661ffff199093169290921717905560028083018054610d549284019190611a08565b50506004805491506000610d6783611ef8565b9190505550600454600303610fac5760005b600a54811015610e90576000600a8281548110610d9857610d98611f45565b6000918252602090912001546001546001600160a01b0390911690610dbf90600390611f5b565b604051600081818185875af1925050503d8060008114610dfb576040519150601f19603f3d011682016040523d82523d6000602084013e610e00565b606091505b5050905080610e5b5760405162461bcd60e51b815260206004820152602160248201527f6576616c7561746545766964656e63653a205472616e73666572206661696c656044820152601960fa1b6064820152608401610226565b336001600160a01b0316600a8381548110610e7857610e78611f45565b50600052505080610e8881611ef8565b915050610d79565b50600080546001600160a01b03166006546040516001600160a01b0391821660248201526002604482015291169060640160408051601f198184030181529181526020820180516001600160e01b031663327c8aa160e11b17905251610ef69190611f7d565b6000604051808303816000865af19150503d8060008114610f33576040519150601f19603f3d011682016040523d82523d6000602084013e610f38565b606091505b5050905080610f9d5760405162461bcd60e51b815260206004820152602b60248201527f6576616c7561746545766964656e63653a205365742070726f6a65637420737460448201526a185d1d5cc819985a5b195960aa1b6064820152608401610226565b506000805460ff60a01b191690555b50505050565b6006546001600160a01b0316331461101b5760405162461bcd60e51b815260206004820152602660248201527f6f6e6c7943726561746f723a2063616c6c6572206973206e6f742074686520636044820152653932b0ba37b960d11b6064820152608401610226565b600560018154811061102f5761102f611f45565b90600052602060002001544210156110945760405162461bcd60e51b815260206004820152602260248201527f73657445766964656e63653a205468652070726f6a6563742068617320656e64604482015261195960f21b6064820152608401610226565b60035442106110fa5760405162461bcd60e51b815260206004820152602c60248201527f73657445766964656e63653a20546865206576616c756174696f6e207065726960448201526b1bd9081a185cc8195b99195960a21b6064820152608401610226565b60005b600a54811015611119578061111181611ef8565b9150506110fd565b50600d6111268282611fe8565b5050565b600d805461113790611f11565b80601f016020809104026020016040519081016040528092919081815260200182805461116390611f11565b80156111b05780601f10611185576101008083540402835291602001916111b0565b820191906000526020600020905b81548152906001019060200180831161119357829003601f168201915b505050505081565b600254421061121d5760405162461bcd60e51b815260206004820152602b60248201527f6c6566744576616c7561746f723a207468652073656c656374696f6e2070657260448201526a34b7b21034b99037bb32b960a91b6064820152608401610226565b336000908152600f602052604090205460ff1661127c5760405162461bcd60e51b815260206004820152601f60248201527f6c6566744576616c7561746f723a204e6f7420616e206576616c7561746f72006044820152606401610226565b336000908152600f60205260408120805460ff191690555b600b5481101561139757336001600160a01b0316600b82815481106112bb576112bb611f45565b6000918252602090912001546001600160a01b03160361138557600b80546112e5906001906120a8565b815481106112f5576112f5611f45565b600091825260209091200154600b80546001600160a01b03909216918390811061132157611321611f45565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600b805480611360576113606120bb565b600082815260209020810160001990810180546001600160a01b031916905501905550565b8061138f81611ef8565b915050611294565b50565b600b5460609060009067ffffffffffffffff8111156113bb576113bb611aa9565b60405190808252806020026020018201604052801561141b57816020015b611408604051806080016040528060608152602001600015158152602001600015158152602001606081525090565b8152602001906001900390816113d95790505b50600b5490915060000361142e57919050565b60005b600b548110156115bf57600e6000600b838154811061145257611452611f45565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208151815460a094810282018501909352608081018381529093919284928491908401828280156114e857602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116114b75790505b5050509183525050600182015460ff8082161515602080850191909152610100909204161515604080840191909152600284018054825181850281018501909352808352606090940193919290919083018282801561158657602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116115555790505b5050505050815250508282815181106115a1576115a1611f45565b602002602001018190525080806115b790611ef8565b915050611431565b50919050565b600581815481106115d557600080fd5b600091825260209091200154905081565b6009546000906001600160a01b0316331461165b5760405162461bcd60e51b815260206004820152602f60248201527f73656c6563744576616c7561746f72733a204e6f74207468652063726f77646660448201526e1d5b991a5b99c818dbdb9d1c9858dd608a1b6064820152608401610226565b600b54600310156116e757600754604051630a6fba9f60e31b81526001600160a01b039091169063537dd4f89061169c906003903090600b9060040161210f565b6020604051808303816000875af11580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df9190612148565b506001905090565b600b5460030361174f5760005b600a54811015611710578061170881611ef8565b9150506116f4565b507ffd35f96279e550a2cd0fa660d841f96151fb8e2f8fdded9e10f8865219543306600b6040516117419190612161565b60405180910390a150600190565b50600090565b600b81815481106106e057600080fd5b61176d61183d565b6001600160a01b0381166117d25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610226565b61139781611897565b6060600a80548060200260200160405190810160405280929190818152602001828054801561183357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611815575b5050505050905090565b6000546001600160a01b031633146108745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610226565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818051906020012083805190602001201490505b92915050565b828054828255906000526020600020908101928215611958579160200282015b8281111561195857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611923565b50611964929150611a56565b5090565b82805482825590600052602060002090601f016020900481019282156119585791602002820160005b838211156119ce57835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302611991565b80156119fb5782816101000a81549060ff02191690556001016020816000010492830192600103026119ce565b5050611964929150611a56565b82805482825590600052602060002090601f0160209004810192821561195857600052602060002091601f016020900482015b82811115611958578254825591600101919060010190611a3b565b5b808211156119645760008155600101611a57565b80356001600160a01b0381168114611a8257600080fd5b919050565b600060208284031215611a9957600080fd5b611aa282611a6b565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ae857611ae8611aa9565b604052919050565b600067ffffffffffffffff821115611b0a57611b0a611aa9565b5060051b60200190565b60006020808385031215611b2757600080fd5b823567ffffffffffffffff811115611b3e57600080fd5b8301601f81018513611b4f57600080fd5b8035611b62611b5d82611af0565b611abf565b81815260059190911b82018301908381019087831115611b8157600080fd5b928401925b82841015611ba657611b9784611a6b565b82529284019290840190611b86565b979650505050505050565b600060208284031215611bc357600080fd5b5035919050565b80358015158114611a8257600080fd5b600082601f830112611beb57600080fd5b81356020611bfb611b5d83611af0565b82815260059290921b84018101918181019086841115611c1a57600080fd5b8286015b84811015611c3c57611c2f81611bca565b8352918301918301611c1e565b509695505050505050565b60008060008060808587031215611c5d57600080fd5b843567ffffffffffffffff80821115611c7557600080fd5b611c8188838901611bda565b9550611c8f60208801611bca565b9450611c9d60408801611bca565b93506060870135915080821115611cb357600080fd5b50611cc087828801611bda565b91505092959194509250565b60006020808385031215611cdf57600080fd5b823567ffffffffffffffff80821115611cf757600080fd5b818501915085601f830112611d0b57600080fd5b813581811115611d1d57611d1d611aa9565b611d2f601f8201601f19168501611abf565b91508082528684828501011115611d4557600080fd5b8084840185840137600090820190930192909252509392505050565b60005b83811015611d7c578181015183820152602001611d64565b50506000910152565b6020815260008251806020840152611da4816040850160208701611d61565b601f01601f19169190910160400192915050565b600081518084526020808501945080840160005b83811015611dea578151151587529582019590820190600101611dcc565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611e8757603f19898403018552815160808151818652611e4282870182611db8565b915050888201511515898601528782015115158886015260608083015192508582038187015250611e738183611db8565b968901969450505090860190600101611e1c565b509098975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611ed65783516001600160a01b031683529284019291840191600101611eb1565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201611f0a57611f0a611ee2565b5060010190565b600181811c90821680611f2557607f821691505b6020821081036115bf57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600082611f7857634e487b7160e01b600052601260045260246000fd5b500490565b60008251611f8f818460208701611d61565b9190910192915050565b601f821115611fe357600081815260208120601f850160051c81016020861015611fc05750805b601f850160051c820191505b81811015611fdf57828155600101611fcc565b5050505b505050565b815167ffffffffffffffff81111561200257612002611aa9565b612016816120108454611f11565b84611f99565b602080601f83116001811461204b57600084156120335750858301515b600019600386901b1c1916600185901b178555611fdf565b600085815260208120601f198616915b8281101561207a5788860151825594840194600190910190840161205b565b50858210156120985787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103818111156118fd576118fd611ee2565b634e487b7160e01b600052603160045260246000fd5b6000815480845260208085019450836000528060002060005b83811015611dea5781546001600160a01b0316875295820195600191820191016120ea565b63ffffffff841681526001600160a01b038316602082015260606040820181905260009061213f908301846120d1565b95945050505050565b60006020828403121561215a57600080fd5b5051919050565b602081526000611aa260208301846120d156fea2646970667358221220882e83214e0047267c39f5dd5f8ac9f7a791d15ea107efc2444baa868543c79d64736f6c63430008140033a26469706673582212208dab2e22fe482c9335b69f3a05383b97f9f0979551802353cbfb96515f26473a64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 359,
        "contract": "contracts/NatureLink.sol:NatureLink",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5156,
        "contract": "contracts/NatureLink.sol:NatureLink",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5159,
        "contract": "contracts/NatureLink.sol:NatureLink",
        "label": "users",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5191,
        "contract": "contracts/NatureLink.sol:NatureLink",
        "label": "isUser",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5196,
        "contract": "contracts/NatureLink.sol:NatureLink",
        "label": "portfolios",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Portfolio)5166_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Project)5187_storage)dyn_storage": {
        "base": "t_struct(Project)5187_storage",
        "encoding": "dynamic_array",
        "label": "struct NatureLink.Project[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Crowdfunding)4290": {
        "encoding": "inplace",
        "label": "contract Crowdfunding",
        "numberOfBytes": "20"
      },
      "t_contract(Evaluation)4948": {
        "encoding": "inplace",
        "label": "contract Evaluation",
        "numberOfBytes": "20"
      },
      "t_enum(status)6329": {
        "encoding": "inplace",
        "label": "enum status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Portfolio)5166_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NatureLink.Portfolio)",
        "numberOfBytes": "32",
        "value": "t_struct(Portfolio)5166_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Portfolio)5166_storage": {
        "encoding": "inplace",
        "label": "struct NatureLink.Portfolio",
        "members": [
          {
            "astId": 5161,
            "contract": "contracts/NatureLink.sol:NatureLink",
            "label": "projectIdCounter",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5165,
            "contract": "contracts/NatureLink.sol:NatureLink",
            "label": "projects",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Project)5187_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Project)5187_storage": {
        "encoding": "inplace",
        "label": "struct NatureLink.Project",
        "members": [
          {
            "astId": 5168,
            "contract": "contracts/NatureLink.sol:NatureLink",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5170,
            "contract": "contracts/NatureLink.sol:NatureLink",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5173,
            "contract": "contracts/NatureLink.sol:NatureLink",
            "label": "projectTime",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5175,
            "contract": "contracts/NatureLink.sol:NatureLink",
            "label": "info",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 5178,
            "contract": "contracts/NatureLink.sol:NatureLink",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(status)6329"
          },
          {
            "astId": 5181,
            "contract": "contracts/NatureLink.sol:NatureLink",
            "label": "crowdfunding",
            "offset": 1,
            "slot": "4",
            "type": "t_contract(Crowdfunding)4290"
          },
          {
            "astId": 5184,
            "contract": "contracts/NatureLink.sol:NatureLink",
            "label": "evaluation",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(Evaluation)4948"
          },
          {
            "astId": 5186,
            "contract": "contracts/NatureLink.sol:NatureLink",
            "label": "creator",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}