{
  "address": "0x77FB30A8978c14663a2bE0156f0Af3922d436Dc6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "evaluation",
      "outputs": [
        {
          "internalType": "contract IEvaluation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "natureLinkAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "permitted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_numWords",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_evaluatorContract",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_evaluators",
          "type": "address[]"
        }
      ],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_evaluatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_evaluators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_evaluatorsSelected",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_natureLinkAddress",
          "type": "address"
        }
      ],
      "name": "setNaturelinkAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_evaluator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_permitted",
          "type": "bool"
        }
      ],
      "name": "setPermittedEvaluator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x468450a8e6deec59bb84b9f104b8cba9cf6b30dc9da8111fd7433ecce5c455fb",
  "receipt": {
    "to": null,
    "from": "0xD96B642Ca70edB30e58248689CEaFc6E36785d68",
    "contractAddress": "0x77FB30A8978c14663a2bE0156f0Af3922d436Dc6",
    "transactionIndex": 0,
    "gasUsed": "1182331",
    "logsBloom": "0x
    "blockHash": "0x9078aeda24d34cd6e4a63d67f8dc1857d2d2240ff6503d44e2402dbbea7947ba",
    "transactionHash": "0x468450a8e6deec59bb84b9f104b8cba9cf6b30dc9da8111fd7433ecce5c455fb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 43424106,
        "transactionHash": "0x468450a8e6deec59bb84b9f104b8cba9cf6b30dc9da8111fd7433ecce5c455fb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d96b642ca70edb30e58248689ceafc6e36785d68",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002a013cdf8feecb00000000000000000000000000000000000000000000000003edc7c4dcd57f1700000000000000000000000000000000000000000000043d370495d5fa05448f00000000000000000000000000000000000000000000000003c3c687fd45904c00000000000000000000000000000000000000000000043d372e9712d995335a",
        "logIndex": 0,
        "blockHash": "0x9078aeda24d34cd6e4a63d67f8dc1857d2d2240ff6503d44e2402dbbea7947ba"
      }
    ],
    "blockNumber": 43424106,
    "cumulativeGasUsed": "1182331",
    "status": 1,
    "byzantium": true
  },
  "args": [
    6683
  ],
  "numDeployments": 2,
  "solcInputHash": "93c81e5e1255107f31150815ed2a902b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evaluation\",\"outputs\":[{\"internalType\":\"contract IEvaluation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"natureLinkAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_numWords\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_evaluatorContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_evaluators\",\"type\":\"address[]\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_evaluatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_evaluators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_evaluatorsSelected\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_natureLinkAddress\",\"type\":\"address\"}],\"name\":\"setNaturelinkAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evaluator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_permitted\",\"type\":\"bool\"}],\"name\":\"setPermittedEvaluator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"constructor\":{\"notice\":\"HARDCODED FOR MUMBAI COORDINATOR: 0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VRFv2Consumer.sol\":\"VRFv2Consumer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"contracts/VRFv2Consumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport '@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol';\\nimport '@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol';\\nimport '@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol';\\n\\nimport './interfaces/IEvaluation.sol';\\n\\ncontract VRFv2Consumer is VRFConsumerBaseV2, ConfirmedOwner {\\n\\tuint64 s_subscriptionId;\\n\\tuint256 public lastRequestId;\\n\\tuint256[] public requestIds;\\n\\n\\tVRFCoordinatorV2Interface COORDINATOR;\\n\\tIEvaluation public evaluation;\\n\\taddress public natureLinkAddress;\\n\\taddress public s_evaluatorContract;\\n\\taddress[] public s_evaluators;\\n\\taddress[] public s_evaluatorsSelected = new address[](3);\\n\\n\\tuint16 requestConfirmations = 3;\\n\\tuint32 callbackGasLimit = 600000;\\n\\tbytes32 keyHash =\\n\\t\\t0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f;\\n\\n\\tstruct RequestStatus {\\n\\t\\tbool fulfilled;\\n\\t\\tbool exists;\\n\\t\\tuint256[] randomWords;\\n\\t}\\n\\n\\tmapping(uint256 => RequestStatus) public s_requests;\\n\\tmapping(address => bool) public permitted;\\n\\n\\tevent RequestSent(uint256 requestId, uint32 numWords);\\n\\tevent RequestFulfilled(uint256 requestId, uint256[] randomWords);\\n\\n\\t/**\\n\\t * HARDCODED FOR MUMBAI\\n\\t * COORDINATOR: 0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed\\n\\t */\\n\\n\\tconstructor(\\n\\t\\tuint64 _subscriptionId\\n\\t)\\n\\t\\tVRFConsumerBaseV2(0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed)\\n\\t\\tConfirmedOwner(msg.sender)\\n\\t{\\n\\t\\tCOORDINATOR = VRFCoordinatorV2Interface(\\n\\t\\t\\t0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed\\n\\t\\t);\\n\\t\\ts_subscriptionId = _subscriptionId;\\n\\t}\\n\\n\\t// ************************ //\\n\\t// *     VRFv2Consumer    * //\\n\\t// ************************ //\\n\\n\\tfunction requestRandomWords(\\n\\t\\tuint32 _numWords,\\n\\t\\taddress _evaluatorContract,\\n\\t\\taddress[] memory _evaluators\\n\\t) external returns (uint256 requestId) {\\n\\t\\trequire(permitted[msg.sender], 'requestRandomWords: Not permitted');\\n\\t\\trequire(\\n\\t\\t\\t_evaluators.length >= 3,\\n\\t\\t\\t'requestRandomWords: Not enough addresses'\\n\\t\\t);\\n\\n\\t\\tevaluation = IEvaluation(_evaluatorContract);\\n\\t\\trequestId = COORDINATOR.requestRandomWords(\\n\\t\\t\\tkeyHash,\\n\\t\\t\\ts_subscriptionId,\\n\\t\\t\\trequestConfirmations,\\n\\t\\t\\tcallbackGasLimit,\\n\\t\\t\\t_numWords\\n\\t\\t);\\n\\n\\t\\ts_evaluators = _evaluators;\\n\\t\\ts_evaluatorsSelected = new address[](3);\\n\\n\\t\\ts_requests[requestId] = RequestStatus({\\n\\t\\t\\trandomWords: new uint256[](0),\\n\\t\\t\\texists: true,\\n\\t\\t\\tfulfilled: false\\n\\t\\t});\\n\\n\\t\\trequestIds.push(requestId);\\n\\t\\tlastRequestId = requestId;\\n\\n\\t\\temit RequestSent(requestId, _numWords);\\n\\t\\treturn requestId;\\n\\t}\\n\\n\\tfunction fulfillRandomWords(\\n\\t\\tuint256 _requestId,\\n\\t\\tuint256[] memory _randomWords\\n\\t) internal override {\\n\\t\\trequire(s_requests[_requestId].exists, 'request not found');\\n\\t\\trequire(_randomWords.length >= 3, 'Not enough random words');\\n\\n\\t\\ts_requests[_requestId].fulfilled = true;\\n\\t\\tbool[] memory isSelected = new bool[](s_evaluators.length);\\n\\n\\t\\tfor (uint i = 0; i < _randomWords.length && i < 3; i++) {\\n\\t\\t\\tuint index = (_randomWords[i] % 10) % s_evaluators.length;\\n\\t\\t\\twhile (isSelected[index]) {\\n\\t\\t\\t\\tindex = (index + 1) % s_evaluators.length;\\n\\t\\t\\t}\\n\\t\\t\\tisSelected[index] = true;\\n\\t\\t\\ts_evaluatorsSelected[i] = s_evaluators[index];\\n\\t\\t}\\n\\n\\t\\tevaluation.setSelectedEvaluators(s_evaluatorsSelected);\\n\\n\\t\\ts_requests[_requestId].fulfilled = true;\\n\\t\\ts_requests[_requestId].randomWords = _randomWords;\\n\\n\\t\\temit RequestFulfilled(_requestId, _randomWords);\\n\\t}\\n\\n\\t// ************************ //\\n\\t// *  Getters y Setters   * //\\n\\t// ************************ //\\n\\n\\tfunction getRequestStatus(\\n\\t\\tuint256 _requestId\\n\\t) external view returns (bool fulfilled, uint256[] memory randomWords) {\\n\\t\\trequire(s_requests[_requestId].exists, 'request not found');\\n\\t\\tRequestStatus memory request = s_requests[_requestId];\\n\\t\\treturn (request.fulfilled, request.randomWords);\\n\\t}\\n\\n\\tfunction setPermittedEvaluator(address _evaluator, bool _permitted) external {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == natureLinkAddress,\\n\\t\\t\\t'setPermittedEvaluator: Not authorized'\\n\\t\\t);\\n\\t\\tpermitted[_evaluator] = _permitted;\\n\\t}\\n\\n\\tfunction setNaturelinkAddress(\\n\\t\\taddress _natureLinkAddress\\n\\t) external onlyOwner returns (address) {\\n\\t\\tnatureLinkAddress = _natureLinkAddress;\\n\\t\\treturn natureLinkAddress;\\n\\t}\\n}\\n\",\"keccak256\":\"0xc21d019d8fcd64950c4af0be5134c8453aec0cb626bf23db4d5131fd342050cc\",\"license\":\"MIT\"},\"contracts/interfaces/IEvaluation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IEvaluation {\\n\\tfunction selectEvaluators() external returns (bool);\\n\\n\\tfunction setSelectedEvaluators(address[] memory _selectedEvaluators) external;\\n}\\n\",\"keccak256\":\"0xc319e3da19522927af8079f0cab9dd3bdec04a661e56e3dde705eecc5a2970cb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600360a08181526101206040529060c0606080368337505081516200002c9260099250602001906200023d565b50600a805465ffffffffffff1916640927c000031790557f4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f600b553480156200007457600080fd5b50604051620014c2380380620014c28339810160408190526200009791620002be565b737a1bac17ccc5b313516c5e16fb24f7659aa5ebed6080523380600081620001065760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156200013957620001398162000192565b5050600480546001600160a01b031916737a1bac17ccc5b313516c5e16fb24f7659aa5ebed17905550600180546001600160401b03909216600160a01b02600160a01b600160e01b0319909216919091179055620002f0565b336001600160a01b03821603620001ec5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401620000fd565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b82805482825590600052602060002090810192821562000295579160200282015b828111156200029557825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200025e565b50620002a3929150620002a7565b5090565b5b80821115620002a35760008155600101620002a8565b600060208284031215620002d157600080fd5b81516001600160401b0381168114620002e957600080fd5b9392505050565b6080516111af62000313600039600081816102fc015261033e01526111af6000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638796ba8c116100a2578063c66880a511610071578063c66880a514610264578063c947dc0014610277578063d8a4676f1461028a578063f2fde38b146102ab578063fc2a88c3146102be57600080fd5b80638796ba8c146101ea5780638c6d9b71146101fd5780638da5cb5b14610210578063a168fa891461022157600080fd5b80635f742a7e116100de5780635f742a7e146101895780636cc301e31461019c57806379ba5097146101cf578063877e7c15146101d757600080fd5b80631ecddcfb146101105780631fe543e3146101405780632af5c91914610155578063537dd4f814610168575b600080fd5b61012361011e366004610db8565b6102c7565b6040516001600160a01b0390911681526020015b60405180910390f35b61015361014e366004610e3c565b6102f1565b005b600554610123906001600160a01b031681565b61017b610176366004610ef5565b61037e565b604051908152602001610137565b610153610197366004610fbb565b610653565b6101bf6101aa366004610ff7565b600d6020526000908152604090205460ff1681565b6040519015158152602001610137565b6101536106e6565b6101236101e5366004610db8565b610790565b61017b6101f8366004610db8565b6107a0565b600754610123906001600160a01b031681565b6000546001600160a01b0316610123565b61024d61022f366004610db8565b600c6020526000908152604090205460ff8082169161010090041682565b604080519215158352901515602083015201610137565b600654610123906001600160a01b031681565b610123610285366004610ff7565b6107c1565b61029d610298366004610db8565b6107f0565b604051610137929190611054565b6101536102b9366004610ff7565b6108e4565b61017b60025481565b600981815481106102d757600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103705760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b61037a82826108f8565b5050565b336000908152600d602052604081205460ff166103e75760405162461bcd60e51b815260206004820152602160248201527f7265717565737452616e646f6d576f7264733a204e6f74207065726d697474656044820152601960fa1b6064820152608401610367565b60038251101561044a5760405162461bcd60e51b815260206004820152602860248201527f7265717565737452616e646f6d576f7264733a204e6f7420656e6f7567682061604482015267646472657373657360c01b6064820152608401610367565b600580546001600160a01b0319166001600160a01b038581169190911790915560048054600b54600154600a546040516305d3b1d360e41b815294850192909252600160a01b900467ffffffffffffffff16602484015261ffff8116604484015262010000900463ffffffff90811660648401528716608483015290911690635d3b1d309060a4016020604051808303816000875af11580156104f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105159190611077565b825190915061052b906008906020850190610d03565b506040805160038082526080820190925290602082016060803683375050815161055c926009925060200190610d03565b506040805160608101825260008082526001602080840182815285518481528083018752858701908152878552600c83529590932084518154945161ffff1990951690151561ff001916176101009415159490940293909317835593518051939492936105d193928501929190910190610d68565b5050600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018290555060028190556040805182815263ffffffff861660208201527fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee910160405180910390a19392505050565b6006546001600160a01b031633146106bb5760405162461bcd60e51b815260206004820152602560248201527f7365745065726d69747465644576616c7561746f723a204e6f7420617574686f6044820152641c9a5e995960da1b6064820152608401610367565b6001600160a01b03919091166000908152600d60205260409020805460ff1916911515919091179055565b6001546001600160a01b031633146107395760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b6044820152606401610367565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b600881815481106102d757600080fd5b600381815481106107b057600080fd5b600091825260209091200154905081565b60006107cb610c05565b50600680546001600160a01b0319166001600160a01b0383169081179091555b919050565b6000818152600c6020526040812054606090610100900460ff1661084a5760405162461bcd60e51b81526020600482015260116024820152701c995c5d595cdd081b9bdd08199bdd5b99607a1b6044820152606401610367565b6000838152600c602090815260408083208151606081018352815460ff80821615158352610100909104161515818501526001820180548451818702810187018652818152929593948601938301828280156108c557602002820191906000526020600020905b8154815260200190600101908083116108b1575b5050505050815250509050806000015181604001519250925050915091565b6108ec610c05565b6108f581610c5a565b50565b6000828152600c6020526040902054610100900460ff1661094f5760405162461bcd60e51b81526020600482015260116024820152701c995c5d595cdd081b9bdd08199bdd5b99607a1b6044820152606401610367565b6003815110156109a15760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f7567682072616e646f6d20776f7264730000000000000000006044820152606401610367565b6000828152600c60205260408120805460ff1916600117905560085467ffffffffffffffff8111156109d5576109d5610dd1565b6040519080825280602002602001820160405280156109fe578160200160208202803683370190505b50905060005b825181108015610a145750600381105b15610b33576000600880549050600a858481518110610a3557610a35611090565b6020026020010151610a4791906110a6565b610a5191906110a6565b90505b828181518110610a6657610a66611090565b602002602001015115610a9257600854610a818260016110de565b610a8b91906110a6565b9050610a54565b6001838281518110610aa657610aa6611090565b60200260200101901515908115158152505060088181548110610acb57610acb611090565b600091825260209091200154600980546001600160a01b039092169184908110610af757610af7611090565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790555080610b2b816110f7565b915050610a04565b50600554604051630853abf560e21b81526001600160a01b039091169063214eafd490610b6590600990600401611110565b600060405180830381600087803b158015610b7f57600080fd5b505af1158015610b93573d6000803e3d6000fd5b5050506000848152600c60209081526040909120805460ff1916600190811782558551610bc69450910191850190610d68565b507ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d8383604051610bf8929190611160565b60405180910390a1505050565b6000546001600160a01b03163314610c585760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b6044820152606401610367565b565b336001600160a01b03821603610cb25760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610367565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b828054828255906000526020600020908101928215610d58579160200282015b82811115610d5857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610d23565b50610d64929150610da3565b5090565b828054828255906000526020600020908101928215610d58579160200282015b82811115610d58578251825591602001919060010190610d88565b5b80821115610d645760008155600101610da4565b600060208284031215610dca57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e1057610e10610dd1565b604052919050565b600067ffffffffffffffff821115610e3257610e32610dd1565b5060051b60200190565b60008060408385031215610e4f57600080fd5b8235915060208084013567ffffffffffffffff811115610e6e57600080fd5b8401601f81018613610e7f57600080fd5b8035610e92610e8d82610e18565b610de7565b81815260059190911b82018301908381019088831115610eb157600080fd5b928401925b82841015610ecf57833582529284019290840190610eb6565b80955050505050509250929050565b80356001600160a01b03811681146107eb57600080fd5b600080600060608486031215610f0a57600080fd5b833563ffffffff81168114610f1e57600080fd5b92506020610f2d858201610ede565b9250604085013567ffffffffffffffff811115610f4957600080fd5b8501601f81018713610f5a57600080fd5b8035610f68610e8d82610e18565b81815260059190911b82018301908381019089831115610f8757600080fd5b928401925b82841015610fac57610f9d84610ede565b82529284019290840190610f8c565b80955050505050509250925092565b60008060408385031215610fce57600080fd5b610fd783610ede565b915060208301358015158114610fec57600080fd5b809150509250929050565b60006020828403121561100957600080fd5b61101282610ede565b9392505050565b600081518084526020808501945080840160005b838110156110495781518752958201959082019060010161102d565b509495945050505050565b821515815260406020820152600061106f6040830184611019565b949350505050565b60006020828403121561108957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000826110c357634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b808201808211156110f1576110f16110c8565b92915050565b600060018201611109576111096110c8565b5060010190565b6020808252825482820181905260008481528281209092916040850190845b818110156111545783546001600160a01b03168352600193840193928501920161112f565b50909695505050505050565b82815260406020820152600061106f604083018461101956fea2646970667358221220306c0b899976ef62aee218959b74e6a3a83d8e4decdeb16ab6d0a5bb4dabfe3764736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80638796ba8c116100a2578063c66880a511610071578063c66880a514610264578063c947dc0014610277578063d8a4676f1461028a578063f2fde38b146102ab578063fc2a88c3146102be57600080fd5b80638796ba8c146101ea5780638c6d9b71146101fd5780638da5cb5b14610210578063a168fa891461022157600080fd5b80635f742a7e116100de5780635f742a7e146101895780636cc301e31461019c57806379ba5097146101cf578063877e7c15146101d757600080fd5b80631ecddcfb146101105780631fe543e3146101405780632af5c91914610155578063537dd4f814610168575b600080fd5b61012361011e366004610db8565b6102c7565b6040516001600160a01b0390911681526020015b60405180910390f35b61015361014e366004610e3c565b6102f1565b005b600554610123906001600160a01b031681565b61017b610176366004610ef5565b61037e565b604051908152602001610137565b610153610197366004610fbb565b610653565b6101bf6101aa366004610ff7565b600d6020526000908152604090205460ff1681565b6040519015158152602001610137565b6101536106e6565b6101236101e5366004610db8565b610790565b61017b6101f8366004610db8565b6107a0565b600754610123906001600160a01b031681565b6000546001600160a01b0316610123565b61024d61022f366004610db8565b600c6020526000908152604090205460ff8082169161010090041682565b604080519215158352901515602083015201610137565b600654610123906001600160a01b031681565b610123610285366004610ff7565b6107c1565b61029d610298366004610db8565b6107f0565b604051610137929190611054565b6101536102b9366004610ff7565b6108e4565b61017b60025481565b600981815481106102d757600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103705760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b61037a82826108f8565b5050565b336000908152600d602052604081205460ff166103e75760405162461bcd60e51b815260206004820152602160248201527f7265717565737452616e646f6d576f7264733a204e6f74207065726d697474656044820152601960fa1b6064820152608401610367565b60038251101561044a5760405162461bcd60e51b815260206004820152602860248201527f7265717565737452616e646f6d576f7264733a204e6f7420656e6f7567682061604482015267646472657373657360c01b6064820152608401610367565b600580546001600160a01b0319166001600160a01b038581169190911790915560048054600b54600154600a546040516305d3b1d360e41b815294850192909252600160a01b900467ffffffffffffffff16602484015261ffff8116604484015262010000900463ffffffff90811660648401528716608483015290911690635d3b1d309060a4016020604051808303816000875af11580156104f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105159190611077565b825190915061052b906008906020850190610d03565b506040805160038082526080820190925290602082016060803683375050815161055c926009925060200190610d03565b506040805160608101825260008082526001602080840182815285518481528083018752858701908152878552600c83529590932084518154945161ffff1990951690151561ff001916176101009415159490940293909317835593518051939492936105d193928501929190910190610d68565b5050600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018290555060028190556040805182815263ffffffff861660208201527fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee910160405180910390a19392505050565b6006546001600160a01b031633146106bb5760405162461bcd60e51b815260206004820152602560248201527f7365745065726d69747465644576616c7561746f723a204e6f7420617574686f6044820152641c9a5e995960da1b6064820152608401610367565b6001600160a01b03919091166000908152600d60205260409020805460ff1916911515919091179055565b6001546001600160a01b031633146107395760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b6044820152606401610367565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b600881815481106102d757600080fd5b600381815481106107b057600080fd5b600091825260209091200154905081565b60006107cb610c05565b50600680546001600160a01b0319166001600160a01b0383169081179091555b919050565b6000818152600c6020526040812054606090610100900460ff1661084a5760405162461bcd60e51b81526020600482015260116024820152701c995c5d595cdd081b9bdd08199bdd5b99607a1b6044820152606401610367565b6000838152600c602090815260408083208151606081018352815460ff80821615158352610100909104161515818501526001820180548451818702810187018652818152929593948601938301828280156108c557602002820191906000526020600020905b8154815260200190600101908083116108b1575b5050505050815250509050806000015181604001519250925050915091565b6108ec610c05565b6108f581610c5a565b50565b6000828152600c6020526040902054610100900460ff1661094f5760405162461bcd60e51b81526020600482015260116024820152701c995c5d595cdd081b9bdd08199bdd5b99607a1b6044820152606401610367565b6003815110156109a15760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f7567682072616e646f6d20776f7264730000000000000000006044820152606401610367565b6000828152600c60205260408120805460ff1916600117905560085467ffffffffffffffff8111156109d5576109d5610dd1565b6040519080825280602002602001820160405280156109fe578160200160208202803683370190505b50905060005b825181108015610a145750600381105b15610b33576000600880549050600a858481518110610a3557610a35611090565b6020026020010151610a4791906110a6565b610a5191906110a6565b90505b828181518110610a6657610a66611090565b602002602001015115610a9257600854610a818260016110de565b610a8b91906110a6565b9050610a54565b6001838281518110610aa657610aa6611090565b60200260200101901515908115158152505060088181548110610acb57610acb611090565b600091825260209091200154600980546001600160a01b039092169184908110610af757610af7611090565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790555080610b2b816110f7565b915050610a04565b50600554604051630853abf560e21b81526001600160a01b039091169063214eafd490610b6590600990600401611110565b600060405180830381600087803b158015610b7f57600080fd5b505af1158015610b93573d6000803e3d6000fd5b5050506000848152600c60209081526040909120805460ff1916600190811782558551610bc69450910191850190610d68565b507ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d8383604051610bf8929190611160565b60405180910390a1505050565b6000546001600160a01b03163314610c585760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b6044820152606401610367565b565b336001600160a01b03821603610cb25760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610367565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b828054828255906000526020600020908101928215610d58579160200282015b82811115610d5857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610d23565b50610d64929150610da3565b5090565b828054828255906000526020600020908101928215610d58579160200282015b82811115610d58578251825591602001919060010190610d88565b5b80821115610d645760008155600101610da4565b600060208284031215610dca57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e1057610e10610dd1565b604052919050565b600067ffffffffffffffff821115610e3257610e32610dd1565b5060051b60200190565b60008060408385031215610e4f57600080fd5b8235915060208084013567ffffffffffffffff811115610e6e57600080fd5b8401601f81018613610e7f57600080fd5b8035610e92610e8d82610e18565b610de7565b81815260059190911b82018301908381019088831115610eb157600080fd5b928401925b82841015610ecf57833582529284019290840190610eb6565b80955050505050509250929050565b80356001600160a01b03811681146107eb57600080fd5b600080600060608486031215610f0a57600080fd5b833563ffffffff81168114610f1e57600080fd5b92506020610f2d858201610ede565b9250604085013567ffffffffffffffff811115610f4957600080fd5b8501601f81018713610f5a57600080fd5b8035610f68610e8d82610e18565b81815260059190911b82018301908381019089831115610f8757600080fd5b928401925b82841015610fac57610f9d84610ede565b82529284019290840190610f8c565b80955050505050509250925092565b60008060408385031215610fce57600080fd5b610fd783610ede565b915060208301358015158114610fec57600080fd5b809150509250929050565b60006020828403121561100957600080fd5b61101282610ede565b9392505050565b600081518084526020808501945080840160005b838110156110495781518752958201959082019060010161102d565b509495945050505050565b821515815260406020820152600061106f6040830184611019565b949350505050565b60006020828403121561108957600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000826110c357634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b808201808211156110f1576110f16110c8565b92915050565b600060018201611109576111096110c8565b5060010190565b6020808252825482820181905260008481528281209092916040850190845b818110156111545783546001600160a01b03168352600193840193928501920161112f565b50909695505050505050565b82815260406020820152600061106f604083018461101956fea2646970667358221220306c0b899976ef62aee218959b74e6a3a83d8e4decdeb16ab6d0a5bb4dabfe3764736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "constructor": {
        "notice": "HARDCODED FOR MUMBAI COORDINATOR: 0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed"
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 125,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 363,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_subscriptionId",
        "offset": 20,
        "slot": "1",
        "type": "t_uint64"
      },
      {
        "astId": 365,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 368,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "requestIds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 371,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(VRFCoordinatorV2Interface)95"
      },
      {
        "astId": 374,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "evaluation",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IEvaluation)754"
      },
      {
        "astId": 376,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "natureLinkAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 378,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_evaluatorContract",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 381,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_evaluators",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 389,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_evaluatorsSelected",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 392,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "requestConfirmations",
        "offset": 0,
        "slot": "10",
        "type": "t_uint16"
      },
      {
        "astId": 395,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "callbackGasLimit",
        "offset": 2,
        "slot": "10",
        "type": "t_uint32"
      },
      {
        "astId": 398,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "keyHash",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 411,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "s_requests",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)406_storage)"
      },
      {
        "astId": 415,
        "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
        "label": "permitted",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IEvaluation)754": {
        "encoding": "inplace",
        "label": "contract IEvaluation",
        "numberOfBytes": "20"
      },
      "t_contract(VRFCoordinatorV2Interface)95": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)406_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VRFv2Consumer.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)406_storage"
      },
      "t_struct(RequestStatus)406_storage": {
        "encoding": "inplace",
        "label": "struct VRFv2Consumer.RequestStatus",
        "members": [
          {
            "astId": 400,
            "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
            "label": "fulfilled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 402,
            "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
            "label": "exists",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 405,
            "contract": "contracts/VRFv2Consumer.sol:VRFv2Consumer",
            "label": "randomWords",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}